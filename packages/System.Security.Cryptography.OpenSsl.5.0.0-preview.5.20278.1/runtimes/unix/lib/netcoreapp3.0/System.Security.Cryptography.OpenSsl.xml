<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Security.Cryptography.OpenSsl</name>
    </assembly>
    <members>
        <member name="T:System.Security.Cryptography.Asn1.Asn1Tag">
            <summary>
              This type represents an ASN.1 tag, as described in ITU-T Recommendation X.680.
            </summary>
        </member>
        <member name="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass">
            <summary>
              The tag class to which this tag belongs.
            </summary>
        </member>
        <member name="P:System.Security.Cryptography.Asn1.Asn1Tag.IsConstructed">
            <summary>
              Indicates if the tag represents a constructed encoding (<c>true</c>), or
              a primitive encoding (<c>false</c>).
            </summary>
        </member>
        <member name="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue">
            <summary>
              The numeric value for this tag.
            </summary>
            <remarks>
              If <see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, this value can
              be interpreted as a <see cref="T:System.Security.Cryptography.Asn1.UniversalTagNumber"/>.
            </remarks>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.Asn1Tag.#ctor(System.Security.Cryptography.Asn1.UniversalTagNumber,System.Boolean)">
            <summary>
              Create an <see cref="T:System.Security.Cryptography.Asn1.Asn1Tag"/> for a tag from the UNIVERSAL class.
            </summary>
            <param name="universalTagNumber">
              The <see cref="T:System.Security.Cryptography.Asn1.UniversalTagNumber"/> value to represent as a tag.
            </param>
            <param name="isConstructed">
              <c>true</c> for a constructed tag, <c>false</c> for a primitive tag.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="universalTagNumber"/> is not a known value.
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.Asn1Tag.#ctor(System.Security.Cryptography.Asn1.TagClass,System.Int32,System.Boolean)">
            <summary>
              Create an <see cref="T:System.Security.Cryptography.Asn1.Asn1Tag"/> for a specified value within a specified tag class.
            </summary>
            <param name="tagClass">
              The <see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> for this tag.
            </param>
            <param name="tagValue">
              The numeric value for this tag.
            </param>
            <param name="isConstructed">
              <c>true</c> for a constructed tag, <c>false</c> for a primitive tag.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="tagClass"/> is not a known value --OR--
              <paramref name="tagValue" /> is negative.
            </exception>
            <remarks>
              This constructor allows for the creation undefined UNIVERSAL class tags.
            </remarks>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.Asn1Tag.AsConstructed">
            <summary>
              Produce an <see cref="T:System.Security.Cryptography.Asn1.Asn1Tag"/> with the same <seealso cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> and
              <seealso cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> values, but whose <seealso cref="P:System.Security.Cryptography.Asn1.Asn1Tag.IsConstructed"/> is <c>true</c>.
            </summary>
            <returns>
              An <see cref="T:System.Security.Cryptography.Asn1.Asn1Tag"/> with the same <seealso cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> and <seealso cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/>
              values, but whose <seealso cref="P:System.Security.Cryptography.Asn1.Asn1Tag.IsConstructed"/> is <c>true</c>.
            </returns>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.Asn1Tag.AsPrimitive">
            <summary>
              Produce an <see cref="T:System.Security.Cryptography.Asn1.Asn1Tag"/> with the same <seealso cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> and
              <seealso cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> values, but whose <seealso cref="P:System.Security.Cryptography.Asn1.Asn1Tag.IsConstructed"/> is <c>false</c>.
            </summary>
            <returns>
              An <see cref="T:System.Security.Cryptography.Asn1.Asn1Tag"/> with the same <seealso cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> and <seealso cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/>
              values, but whose <seealso cref="P:System.Security.Cryptography.Asn1.Asn1Tag.IsConstructed"/> is <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.Asn1Tag.TryDecode(System.ArraySegment{System.Byte},System.Security.Cryptography.Asn1.Asn1Tag@,System.Int32@)">
            <summary>
              Read a BER-encoded tag which starts at <paramref name="source"/>.
            </summary>
            <param name="source">
              The read only byte sequence from which to read.
            </param>
            <param name="tag">
              The decoded <see cref="T:System.Security.Cryptography.Asn1.Asn1Tag"/>.
            </param>
            <param name="bytesConsumed"></param>
            <returns>
              <c>true</c> if a tag was correctly decoded, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.Asn1Tag.TryDecode(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.Asn1.Asn1Tag@,System.Int32@)">
            <summary>
              Read a BER-encoded tag which starts at <paramref name="source"/>.
            </summary>
            <param name="source">
              The read only byte sequence whose beginning is a BER-encoded tag.
            </param>
            <param name="tag">
              The decoded <see cref="T:System.Security.Cryptography.Asn1.Asn1Tag"/>.
            </param>
            <param name="bytesConsumed"></param>
            <returns>
              <c>true</c> if a tag was correctly decoded, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.Asn1Tag.CalculateEncodedSize">
            <summary>
              Report the number of bytes required for the BER-encoding of this tag.
            </summary>
            <returns>
              The number of bytes required for the BER-encoding of this tag.
            </returns>
            <seealso cref="M:System.Security.Cryptography.Asn1.Asn1Tag.TryEncode(System.Span{System.Byte},System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.Asn1Tag.TryEncode(System.Span{System.Byte},System.Int32@)">
            <summary>
              Write the BER-encoded form of this tag to <paramref name="destination"/>.
            </summary>
            <param name="destination">
              The start of where the encoded tag should be written.
            </param>
            <param name="bytesWritten">
              Receives the value from <see cref="M:System.Security.Cryptography.Asn1.Asn1Tag.CalculateEncodedSize"/> on success, 0 on failure.
            </param>
            <returns>
              <c>false</c> if <paramref name="destination"/>.<see cref="P:System.Span`1.Length"/> &lt;
              <see cref="M:System.Security.Cryptography.Asn1.Asn1Tag.CalculateEncodedSize"/>(), <c>true</c> otherwise.
            </returns>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.Asn1Tag.TryEncode(System.ArraySegment{System.Byte},System.Int32@)">
            <summary>
              Write the BER-encoded form of this tag to <paramref name="destination"/>.
            </summary>
            <param name="destination">
              The start of where the encoded tag should be written.
            </param>
            <param name="bytesWritten">
              Receives the value from <see cref="M:System.Security.Cryptography.Asn1.Asn1Tag.CalculateEncodedSize"/> on success, 0 on failure.
            </param>
            <returns>
              <c>false</c> if <paramref name="destination"/>.<see cref="P:System.ArraySegment`1.Count"/> &lt;
              <see cref="M:System.Security.Cryptography.Asn1.Asn1Tag.CalculateEncodedSize"/>(), <c>true</c> otherwise.
            </returns>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.Asn1Tag.Encode(System.Span{System.Byte})">
            <summary>
              Write the BER-encoded form of this tag to <paramref name="destination"/>.
            </summary>
            <param name="destination">
              The start of where the encoded tag should be written.
            </param>
            <returns>
              The number of bytes written to <paramref name="destination"/>.
            </returns>
            <seealso cref="M:System.Security.Cryptography.Asn1.Asn1Tag.CalculateEncodedSize"/>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              <paramref name="destination"/>.<see cref="P:System.Span`1.Length"/> &lt; <see cref="M:System.Security.Cryptography.Asn1.Asn1Tag.CalculateEncodedSize"/>.
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.Asn1Tag.Encode(System.ArraySegment{System.Byte})">
            <summary>
              Write the BER-encoded form of this tag to <paramref name="destination"/>.
            </summary>
            <param name="destination">
              The start of where the encoded tag should be written.
            </param>
            <returns>
              The number of bytes written to <paramref name="destination"/>.
            </returns>
            <seealso cref="M:System.Security.Cryptography.Asn1.Asn1Tag.CalculateEncodedSize"/>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              <paramref name="destination"/>.<see cref="P:System.ArraySegment`1.Count"/> &lt; <see cref="M:System.Security.Cryptography.Asn1.Asn1Tag.CalculateEncodedSize"/>.
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.Asn1Tag.Equals(System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Tests if <paramref name="other"/> has the same encoding as this tag.
            </summary>
            <param name="other">
              Tag to test for equality.
            </param>
            <returns>
              <c>true</c> if <paramref name="other"/> has the same values for
              <see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/>, <see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/>, and <see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.IsConstructed"/>;
              <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.Asn1Tag.Equals(System.Object)">
            <summary>
              Tests if <paramref name="obj"/> is an <see cref="T:System.Security.Cryptography.Asn1.Asn1Tag"/> with the same
              encoding as this tag.
            </summary>
            <param name="obj">Object to test for value equality</param>
            <returns>
              <c>false</c> if <paramref name="obj"/> is not an <see cref="T:System.Security.Cryptography.Asn1.Asn1Tag"/>,
              <see cref="M:System.Security.Cryptography.Asn1.Asn1Tag.Equals(System.Security.Cryptography.Asn1.Asn1Tag)"/> otherwise.
            </returns>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.Asn1Tag.GetHashCode">
            <summary>
              Returns the hash code for this instance.
            </summary>
            <returns>
              A 32-bit signed integer hash code.
            </returns>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.Asn1Tag.op_Equality(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Tests if two <see cref="T:System.Security.Cryptography.Asn1.Asn1Tag"/> values have the same BER encoding.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
              <c>true</c> if <paramref name="left"/> and <paramref name="right"/> have the same
              BER encoding, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.Asn1Tag.op_Inequality(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Tests if two <see cref="T:System.Security.Cryptography.Asn1.Asn1Tag"/> values have a different BER encoding.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
              <c>true</c> if <paramref name="left"/> and <paramref name="right"/> have a different
              BER encoding, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.Asn1Tag.HasSameClassAndValue(System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Tests if <paramref name="other"/> has the same <see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> and <see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/>
              values as this tag, and does not compare <see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.IsConstructed"/>.
            </summary>
            <param name="other">Tag to test for concept equality.</param>
            <returns>
              <c>true</c> if <paramref name="other"/> has the same <see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> and <see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/>
              as this tag, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.Asn1Tag.ToString">
            <summary>
              Provides a text representation of this tag suitable for debugging.
            </summary>
            <returns>
              A text representation of this tag suitable for debugging.
            </returns>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.Asn1Tag.EndOfContents">
            <summary>
              Represents the End-of-Contents meta-tag.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.Asn1Tag.Boolean">
            <summary>
              Represents the universal class tag for a Boolean value.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.Asn1Tag.Integer">
            <summary>
              Represents the universal class tag for an Integer value.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.Asn1Tag.PrimitiveBitString">
            <summary>
              Represents the universal class tag for a Bit String value under a primitive encoding.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.Asn1Tag.ConstructedBitString">
            <summary>
              Represents the universal class tag for a Bit String value under a constructed encoding.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.Asn1Tag.PrimitiveOctetString">
            <summary>
              Represents the universal class tag for an Octet String value under a primitive encoding.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.Asn1Tag.ConstructedOctetString">
            <summary>
              Represents the universal class tag for a Octet String value under a constructed encoding.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.Asn1Tag.Null">
            <summary>
              Represents the universal class tag for a Null value.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.Asn1Tag.ObjectIdentifier">
            <summary>
              Represents the universal class tag for an Object Identifier value.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.Asn1Tag.Enumerated">
            <summary>
              Represents the universal class tag for an Enumerated value.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.Asn1Tag.Sequence">
            <summary>
              Represents the universal class tag for a Sequence value (always a constructed encoding).
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.Asn1Tag.SetOf">
            <summary>
              Represents the universal class tag for a SetOf value (always a constructed encoding).
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.Asn1Tag.UtcTime">
            <summary>
              Represents the universal class tag for a UtcTime value.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.Asn1Tag.GeneralizedTime">
            <summary>
              Represents the universal class tag for a GeneralizedTime value.
            </summary>
        </member>
        <member name="T:System.Security.Cryptography.Asn1.BMPEncoding">
            <summary>
              Big-Endian UCS-2 encoding (the same as UTF-16BE, but disallowing surrogate pairs to leave plane 0)
            </summary>
        </member>
        <member name="T:System.Security.Cryptography.Asn1.T61Encoding">
            <summary>
            Compatibility encoding for T61Strings. Interprets the characters as UTF-8 or
            ISO-8859-1 as a fallback.
            </summary>
        </member>
        <member name="T:System.Security.Cryptography.Asn1.AsnEncodingRules">
            <summary>
              The encoding ruleset for an <see cref="T:System.Security.Cryptography.Asn1.AsnReader"/> or <see cref="T:System.Security.Cryptography.Asn1.AsnWriter"/>.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.AsnEncodingRules.BER">
            <summary>
            ITU-T X.690 Basic Encoding Rules
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.AsnEncodingRules.CER">
            <summary>
            ITU-T X.690 Canonical Encoding Rules
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.AsnEncodingRules.DER">
            <summary>
            ITU-T X.690 Distinguished Encoding Rules
            </summary>
        </member>
        <member name="T:System.Security.Cryptography.Asn1.AsnValueReader">
            <summary>
              A stateful, forward-only reader for BER-, CER-, or DER-encoded ASN.1 data.
            </summary>
        </member>
        <member name="P:System.Security.Cryptography.Asn1.AsnValueReader.RuleSet">
            <summary>
              The <see cref="T:System.Security.Cryptography.Asn1.AsnEncodingRules"/> in use by this reader.
            </summary>
        </member>
        <member name="P:System.Security.Cryptography.Asn1.AsnValueReader.HasData">
            <summary>
              An indication of whether or not the reader has remaining data available to process.
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.#ctor(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.Asn1.AsnEncodingRules)">
             <summary>
               Construct an <see cref="T:System.Security.Cryptography.Asn1.AsnValueReader"/> over <paramref name="data"/> with a given ruleset.
             </summary>
             <param name="data">The data to read.</param>
             <param name="ruleSet">The encoding constraints for the reader.</param>
             <remarks>
               This constructor does not evaluate <paramref name="data"/> for correctness,
               any correctness checks are done as part of member methods.
            
               This constructor does not copy <paramref name="data"/>. The caller is responsible for
               ensuring that the values do not change until the reader is finished.
             </remarks>
             <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="ruleSet"/> is not defined.
             </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.ThrowIfNotEmpty">
            <summary>
              Throws a standardized <see cref="T:System.Security.Cryptography.CryptographicException"/> if the reader has remaining
              data, performs no function if <see cref="P:System.Security.Cryptography.Asn1.AsnValueReader.HasData"/> returns <c>false</c>.
            </summary>
            <remarks>
              This method provides a standardized target and standardized exception for reading a
              "closed" structure, such as the nested content for an explicitly tagged value.
            </remarks>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.PeekTag">
            <summary>
              Read the encoded tag at the next data position, without advancing the reader.
            </summary>
            <returns>
              The decoded <see cref="T:System.Security.Cryptography.Asn1.Asn1Tag"/> value.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              a tag could not be decoded at the reader's current position.
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.PeekEncodedValue">
            <summary>
              Get a <see cref="T:System.ReadOnlySpan`1"/> view of the next encoded value without
              advancing the reader. For indefinite length encodings this includes the
              End of Contents marker.
            </summary>
            <returns>A <see cref="T:System.ReadOnlySpan`1"/> view of the next encoded value.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              The reader is positioned at a point where the tag or length is invalid
              under the current encoding rules.
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.PeekContentBytes"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadEncodedValue"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.PeekContentBytes">
            <summary>
              Get a <see cref="T:System.ReadOnlySpan`1"/> view of the content octets (bytes) of the
              next encoded value without advancing the reader.
            </summary>
            <returns>
              A <see cref="T:System.ReadOnlySpan`1"/> view of the contents octets of the next encoded value.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              The reader is positioned at a point where the tag or length is invalid
              under the current encoding rules.
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.PeekEncodedValue"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadEncodedValue">
            <summary>
              Get a <see cref="T:System.ReadOnlySpan`1"/> view of the next encoded value,
              and advance the reader past it. For an indefinite length encoding this includes
              the End of Contents marker.
            </summary>
            <returns>A <see cref="T:System.ReadOnlySpan`1"/> view of the next encoded value.</returns>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.PeekEncodedValue"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.SeekEndOfContents(System.ReadOnlySpan{System.Byte})">
            <summary>
            Get the number of bytes between the start of <paramref name="source" /> and
            the End-of-Contents marker
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.SeekEndOfContents(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.Asn1.AsnEncodingRules)">
            <summary>
            Get the number of bytes between the start of <paramref name="source" /> and
            the End-of-Contents marker
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.MatchSlice(System.ReadOnlyMemory{System.Byte}@)">
            <summary>
              Slices <paramref name="memory"/> to represent the same data this reader value has.
            </summary>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              <paramref name="memory"/> does not represent a super-range of the data this reader is processing.
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.TryReadPrimitiveBitStringValue(System.Int32@,System.ReadOnlySpan{System.Byte}@)">
            <summary>
              Reads the next value as a BIT STRING with tag UNIVERSAL 3, returning the contents
              as a <see cref="T:System.ReadOnlySpan`1"/> over the original data.
            </summary>
            <param name="unusedBitCount">
              On success, receives the number of bits in the last byte which were reported as
              "unused" by the writer.
            </param>
            <param name="value">
              On success, receives a <see cref="T:System.ReadOnlySpan`1"/> over the original data
              corresponding to the value of the BIT STRING.
            </param>
            <returns>
              <c>true</c> and advances the reader if the BIT STRING value had a primitive encoding,
              <c>false</c> and does not advance the reader if it had a constructed encoding.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.TryCopyBitStringBytes(System.Span{System.Byte},System.Int32@,System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.TryReadPrimitiveBitStringValue(System.Security.Cryptography.Asn1.Asn1Tag,System.Int32@,System.ReadOnlySpan{System.Byte}@)">
            <summary>
              Reads the next value as a BIT STRING with a specified tag, returning the contents
              as a <see cref="T:System.ReadOnlySpan`1"/> over the original data.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="unusedBitCount">
              On success, receives the number of bits in the last byte which were reported as
              "unused" by the writer.
            </param>
            <param name="value">
              On success, receives a <see cref="T:System.ReadOnlySpan`1"/> over the original data
              corresponding to the value of the BIT STRING.
            </param>
            <returns>
              <c>true</c> and advances the reader if the BIT STRING value had a primitive encoding,
              <c>false</c> and does not advance the reader if it had a constructed encoding.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.TryCopyBitStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Span{System.Byte},System.Int32@,System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.TryCopyBitStringBytes(System.Span{System.Byte},System.Int32@,System.Int32@)">
            <summary>
              Reads the next value as a BIT STRING with tag UNIVERSAL 3, copying the value
              into a provided destination buffer.
            </summary>
            <param name="destination">The buffer in which to write.</param>
            <param name="unusedBitCount">
              On success, receives the number of bits in the last byte which were reported as
              "unused" by the writer.
            </param>
            <param name="bytesWritten">
              On success, receives the number of bytes written to <paramref name="destination"/>.
            </param>
            <returns>
              <c>true</c> and advances the reader if <paramref name="destination"/> had sufficient
              length to receive the value, otherwise
              <c>false</c> and the reader does not advance.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.TryReadPrimitiveBitStringValue(System.Int32@,System.ReadOnlySpan{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadBitString(System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.TryCopyBitStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Span{System.Byte},System.Int32@,System.Int32@)">
            <summary>
              Reads the next value as a BIT STRING with a specified tag, copying the value
              into a provided destination buffer.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="destination">The buffer in which to write.</param>
            <param name="unusedBitCount">
              On success, receives the number of bits in the last byte which were reported as
              "unused" by the writer.
            </param>
            <param name="bytesWritten">
              On success, receives the number of bytes written to <paramref name="destination"/>.
            </param>
            <returns>
              <c>true</c> and advances the reader if <paramref name="destination"/> had sufficient
              length to receive the value, otherwise
              <c>false</c> and the reader does not advance.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.TryReadPrimitiveBitStringValue(System.Security.Cryptography.Asn1.Asn1Tag,System.Int32@,System.ReadOnlySpan{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadBitString(System.Security.Cryptography.Asn1.Asn1Tag,System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadBitString(System.Int32@)">
            <summary>
              Reads the next value as a BIT STRING with tag UNIVERSAL 3, returning the value
              in a byte array.
            </summary>
            <param name="unusedBitCount">
              On success, receives the number of bits in the last byte which were reported as
              "unused" by the writer.
            </param>
            <returns>
              a copy of the value in a newly allocated, precisely sized, array.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.TryReadPrimitiveBitStringValue(System.Int32@,System.ReadOnlySpan{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.TryCopyBitStringBytes(System.Span{System.Byte},System.Int32@,System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadBitString(System.Security.Cryptography.Asn1.Asn1Tag,System.Int32@)">
            <summary>
              Reads the next value as a BIT STRING with tag UNIVERSAL 3, returning the value
              in a byte array.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="unusedBitCount">
              On success, receives the number of bits in the last byte which were reported as
              "unused" by the writer.
            </param>
            <returns>
              a copy of the value in a newly allocated, precisely sized, array.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.TryReadPrimitiveBitStringValue(System.Security.Cryptography.Asn1.Asn1Tag,System.Int32@,System.ReadOnlySpan{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.TryCopyBitStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Span{System.Byte},System.Int32@,System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadBoolean">
            <summary>
              Reads the next value as a Boolean with tag UNIVERSAL 1.
            </summary>
            <returns>The next value as a Boolean.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadBoolean(System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Reads the next value as a Boolean with a specified tag.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <returns>The next value as a Boolean.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadEnumeratedBytes">
            <summary>
              Reads the next value as an Enumerated value with tag UNIVERSAL 10,
              returning the contents as a <see cref="T:System.ReadOnlySpan`1"/> over the original data.
            </summary>
            <returns>
              The bytes of the Enumerated value, in signed big-endian form.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadEnumeratedValue``1"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadEnumeratedBytes(System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Reads the next value as a Enumerated with a specified tag, returning the contents
              as a <see cref="T:System.ReadOnlySpan`1"/> over the original data.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <returns>
              The bytes of the Enumerated value, in signed big-endian form.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadEnumeratedValue``1(System.Security.Cryptography.Asn1.Asn1Tag)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadEnumeratedValue``1">
            <summary>
              Reads the next value as an Enumerated value with tag UNIVERSAL 10, converting it to
              the non-[<see cref="T:System.FlagsAttribute"/>] enum specfied by <typeparamref name="TEnum"/>.
            </summary>
            <typeparam name="TEnum">Destination enum type</typeparam>
            <returns>
              the Enumerated value converted to a <typeparamref name="TEnum"/>.
            </returns>
            <remarks>
              This method does not validate that the return value is defined within
              <typeparamref name="TEnum"/>.
            </remarks>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules --OR--
              the encoded value is too big to fit in a <typeparamref name="TEnum"/> value
            </exception>
            <exception cref="T:System.ArgumentException">
              <typeparamref name="TEnum"/> is not an enum type --OR--
              <typeparamref name="TEnum"/> was declared with <see cref="T:System.FlagsAttribute"/>
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadEnumeratedValue``1(System.Security.Cryptography.Asn1.Asn1Tag)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadEnumeratedValue``1(System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Reads the next value as an Enumerated with tag UNIVERSAL 10, converting it to the
              non-[<see cref="T:System.FlagsAttribute"/>] enum specfied by <typeparamref name="TEnum"/>.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <typeparam name="TEnum">Destination enum type</typeparam>
            <returns>
              the Enumerated value converted to a <typeparamref name="TEnum"/>.
            </returns>
            <remarks>
              This method does not validate that the return value is defined within
              <typeparamref name="TEnum"/>.
            </remarks>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules --OR--
              the encoded value is too big to fit in a <typeparamref name="TEnum"/> value
            </exception>
            <exception cref="T:System.ArgumentException">
              <typeparamref name="TEnum"/> is not an enum type --OR--
              <typeparamref name="TEnum"/> was declared with <see cref="T:System.FlagsAttribute"/>
              --OR--
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadEnumeratedValue(System.Type)">
            <summary>
              Reads the next value as an Enumerated value with tag UNIVERSAL 10, converting it to
              the non-[<see cref="T:System.FlagsAttribute"/>] enum specfied by <paramref name="tEnum"/>.
            </summary>
            <param name="tEnum">Type object representing the destination type.</param>
            <returns>
              the Enumerated value converted to a <paramref name="tEnum"/>.
            </returns>
            <remarks>
              This method does not validate that the return value is defined within
              <paramref name="tEnum"/>.
            </remarks>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules --OR--
              the encoded value is too big to fit in a <paramref name="tEnum"/> value
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="tEnum"/> is not an enum type --OR--
              <paramref name="tEnum"/> was declared with <see cref="T:System.FlagsAttribute"/>
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadEnumeratedValue(System.Security.Cryptography.Asn1.Asn1Tag,System.Type)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadEnumeratedValue(System.Security.Cryptography.Asn1.Asn1Tag,System.Type)">
            <summary>
              Reads the next value as an Enumerated with tag UNIVERSAL 10, converting it to the
              non-[<see cref="T:System.FlagsAttribute"/>] enum specfied by <paramref name="tEnum"/>.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="tEnum">Type object representing the destination type.</param>
            <returns>
              the Enumerated value converted to a <paramref name="tEnum"/>.
            </returns>
            <remarks>
              This method does not validate that the return value is defined within
              <paramref name="tEnum"/>.
            </remarks>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules --OR--
              the encoded value is too big to fit in a <paramref name="tEnum"/> value
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="tEnum"/> is not an enum type --OR--
              <paramref name="tEnum"/> was declared with <see cref="T:System.FlagsAttribute"/>
              --OR--
              <paramref name="tEnum"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tEnum"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadGeneralizedTime(System.Boolean)">
            <summary>
              Reads the next value as a GeneralizedTime with tag UNIVERSAL 24.
            </summary>
            <param name="disallowFractions">
              <c>true</c> to cause a <see cref="T:System.Security.Cryptography.CryptographicException"/> to be thrown if a
              fractional second is encountered, such as the restriction on the PKCS#7 Signing
              Time attribute.
            </param>
            <returns>
              a DateTimeOffset representing the value encoded in the GeneralizedTime.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadGeneralizedTime(System.Security.Cryptography.Asn1.Asn1Tag,System.Boolean)">
            <summary>
              Reads the next value as a GeneralizedTime with a specified tag.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="disallowFractions">
              <c>true</c> to cause a <see cref="T:System.Security.Cryptography.CryptographicException"/> to be thrown if a
              fractional second is encountered, such as the restriction on the PKCS#7 Signing
              Time attribute.
            </param>
            <returns>
              a DateTimeOffset representing the value encoded in the GeneralizedTime.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadIntegerBytes">
            <summary>
              Reads the next value as an Integer with tag UNIVERSAL 2, returning the contents
              as a <see cref="T:System.ReadOnlySpan`1"/> over the original data.
            </summary>
            <returns>
              The bytes of the Integer value, in signed big-endian form.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadIntegerBytes(System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Reads the next value as a Integer with a specified tag, returning the contents
              as a <see cref="T:System.ReadOnlySpan`1"/> over the original data.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <returns>
              The bytes of the Integer value, in signed big-endian form.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadInteger">
            <summary>
              Reads the next value as an Integer with tag UNIVERSAL 2, returning the contents
              as a <see cref="T:System.Numerics.BigInteger"/>.
            </summary>
            <returns>
              The bytes of the Integer value, in signed big-endian form.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadInteger(System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Reads the next value as a Integer with a specified tag, returning the contents
              as a <see cref="T:System.Numerics.BigInteger"/> over the original data.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <returns>
              The bytes of the Integer value, in signed big-endian form.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.TryReadInt32(System.Int32@)">
            <summary>
              Reads the next value as an Integer with tag UNIVERSAL 2, interpreting the contents
              as an <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">
              On success, receives the <see cref="T:System.Int32"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.Int32.MinValue"/> and <see cref="F:System.Int32.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.TryReadInt32(System.Security.Cryptography.Asn1.Asn1Tag,System.Int32@)">
            <summary>
              Reads the next value as a Integer with a specified tag, interpreting the contents
              as an <see cref="T:System.Int32"/>.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="value">
              On success, receives the <see cref="T:System.Int32"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.Int32.MinValue"/> and <see cref="F:System.Int32.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.TryReadUInt32(System.UInt32@)">
            <summary>
              Reads the next value as an Integer with tag UNIVERSAL 2, interpreting the contents
              as a <see cref="T:System.UInt32"/>.
            </summary>
            <param name="value">
              On success, receives the <see cref="T:System.UInt32"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.UInt32.MinValue"/> and <see cref="F:System.UInt32.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.TryReadUInt32(System.Security.Cryptography.Asn1.Asn1Tag,System.UInt32@)">
            <summary>
              Reads the next value as a Integer with a specified tag, interpreting the contents
              as a <see cref="T:System.UInt32"/>.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="value">
              On success, receives the <see cref="T:System.UInt32"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.UInt32.MinValue"/> and <see cref="F:System.UInt32.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.TryReadInt64(System.Int64@)">
            <summary>
              Reads the next value as an Integer with tag UNIVERSAL 2, interpreting the contents
              as a <see cref="T:System.Int64"/>.
            </summary>
            <param name="value">
              On success, receives the <see cref="T:System.Int64"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.Int64.MinValue"/> and <see cref="F:System.Int64.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.TryReadInt64(System.Security.Cryptography.Asn1.Asn1Tag,System.Int64@)">
            <summary>
              Reads the next value as a Integer with a specified tag, interpreting the contents
              as an <see cref="T:System.Int64"/>.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="value">
              On success, receives the <see cref="T:System.Int64"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.Int64.MinValue"/> and <see cref="F:System.Int64.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.TryReadUInt64(System.UInt64@)">
            <summary>
              Reads the next value as an Integer with tag UNIVERSAL 2, interpreting the contents
              as a <see cref="T:System.UInt64"/>.
            </summary>
            <param name="value">
              On success, receives the <see cref="T:System.UInt64"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.UInt64.MinValue"/> and <see cref="F:System.UInt64.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.TryReadUInt64(System.Security.Cryptography.Asn1.Asn1Tag,System.UInt64@)">
            <summary>
              Reads the next value as a Integer with a specified tag, interpreting the contents
              as a <see cref="T:System.UInt64"/>.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="value">
              On success, receives the <see cref="T:System.UInt64"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.UInt64.MinValue"/> and <see cref="F:System.UInt64.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.TryReadInt16(System.Int16@)">
            <summary>
              Reads the next value as an Integer with tag UNIVERSAL 2, interpreting the contents
              as a <see cref="T:System.Int16"/>.
            </summary>
            <param name="value">
              On success, receives the <see cref="T:System.Int16"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.Int16.MinValue"/> and <see cref="F:System.Int16.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.TryReadInt16(System.Security.Cryptography.Asn1.Asn1Tag,System.Int16@)">
            <summary>
              Reads the next value as a Integer with a specified tag, interpreting the contents
              as an <see cref="T:System.Int16"/>.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="value">
              On success, receives the <see cref="T:System.Int16"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.Int16.MinValue"/> and <see cref="F:System.Int16.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.TryReadUInt16(System.UInt16@)">
            <summary>
              Reads the next value as an Integer with tag UNIVERSAL 2, interpreting the contents
              as a <see cref="T:System.UInt16"/>.
            </summary>
            <param name="value">
              On success, receives the <see cref="T:System.UInt16"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.UInt16.MinValue"/> and <see cref="F:System.UInt16.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.TryReadUInt16(System.Security.Cryptography.Asn1.Asn1Tag,System.UInt16@)">
            <summary>
              Reads the next value as a Integer with a specified tag, interpreting the contents
              as a <see cref="T:System.UInt16"/>.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="value">
              On success, receives the <see cref="T:System.UInt16"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.UInt16.MinValue"/> and <see cref="F:System.UInt16.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.TryReadInt8(System.SByte@)">
            <summary>
              Reads the next value as an Integer with tag UNIVERSAL 2, interpreting the contents
              as an <see cref="T:System.SByte"/>.
            </summary>
            <param name="value">
              On success, receives the <see cref="T:System.SByte"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.SByte.MinValue"/> and <see cref="F:System.SByte.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.TryReadInt8(System.Security.Cryptography.Asn1.Asn1Tag,System.SByte@)">
            <summary>
              Reads the next value as a Integer with a specified tag, interpreting the contents
              as an <see cref="T:System.SByte"/>.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="value">
              On success, receives the <see cref="T:System.SByte"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.SByte.MinValue"/> and <see cref="F:System.SByte.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the Integer value is not valid
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.TryReadUInt8(System.Byte@)">
            <summary>
              Reads the next value as an Integer with tag UNIVERSAL 2, interpreting the contents
              as a <see cref="T:System.Byte"/>.
            </summary>
            <param name="value">
              On success, receives the <see cref="T:System.Byte"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.Byte.MinValue"/> and <see cref="F:System.Byte.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.TryReadUInt8(System.Security.Cryptography.Asn1.Asn1Tag,System.Byte@)">
            <summary>
              Reads the next value as a Integer with a specified tag, interpreting the contents
              as a <see cref="T:System.Byte"/>.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="value">
              On success, receives the <see cref="T:System.Byte"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.Byte.MinValue"/> and <see cref="F:System.Byte.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadNamedBitListValue``1">
            <summary>
              Reads the next value as a NamedBitList with tag UNIVERSAL 3, converting it to the
              [<see cref="T:System.FlagsAttribute"/>] enum specfied by <typeparamref name="TFlagsEnum"/>.
            </summary>
            <typeparam name="TFlagsEnum">Destination enum type</typeparam>
            <returns>
              the NamedBitList value converted to a <typeparamref name="TFlagsEnum"/>.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules --OR--
              the encoded value is too big to fit in a <typeparamref name="TFlagsEnum"/> value
            </exception>
            <exception cref="T:System.ArgumentException">
              <typeparamref name="TFlagsEnum"/> is not an enum type --OR--
              <typeparamref name="TFlagsEnum"/> was not declared with <see cref="T:System.FlagsAttribute"/>
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadNamedBitListValue``1(System.Security.Cryptography.Asn1.Asn1Tag)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadNamedBitListValue``1(System.Security.Cryptography.Asn1.Asn1Tag)">
             <summary>
               Reads the next value as a NamedBitList with tag UNIVERSAL 3, converting it to the
               [<see cref="T:System.FlagsAttribute"/>] enum specfied by <typeparamref name="TFlagsEnum"/>.
             </summary>
             <param name="expectedTag">The tag to check for before reading.</param>
             <typeparam name="TFlagsEnum">Destination enum type</typeparam>
             <returns>
               the NamedBitList value converted to a <typeparamref name="TFlagsEnum"/>.
             </returns>
             <exception cref="T:System.Security.Cryptography.CryptographicException">
               the next value does not have the correct tag --OR--
               the length encoding is not valid under the current encoding rules --OR--
               the contents are not valid under the current encoding rules --OR--
               the encoded value is too big to fit in a <typeparamref name="TFlagsEnum"/> value
             </exception>
             <exception cref="T:System.ArgumentException">
               <typeparamref name="TFlagsEnum"/> is not an enum type --OR--
               <typeparamref name="TFlagsEnum"/> was not declared with <see cref="T:System.FlagsAttribute"/>
               --OR--
               <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
               <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
               <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
               the method
             </exception>
             <remarks>
               The bit alignment performed by this method is to interpret the most significant bit
               in the first byte of the value as the least significant bit in <typeparamref name="TFlagsEnum"/>,
               with bits increasing in value until the least significant bit of the first byte, proceeding
               with the most significant bit of the second byte, and so on. Under this scheme, the following
               ASN.1 type declaration and C# enumeration can be used together:
            
               <code>
                 KeyUsage ::= BIT STRING {
                   digitalSignature   (0),
                   nonRepudiation     (1),
                   keyEncipherment    (2),
                   dataEncipherment   (3),
                   keyAgreement       (4),
                   keyCertSign        (5),
                   cRLSign            (6),
                   encipherOnly       (7),
                   decipherOnly       (8) }
               </code>
            
               <code>
                 [Flags]
                 enum KeyUsage
                 {
                     None              = 0,
                     DigitalSignature  = 1 &lt;&lt; (0),
                     NonRepudiation    = 1 &lt;&lt; (1),
                     KeyEncipherment   = 1 &lt;&lt; (2),
                     DataEncipherment  = 1 &lt;&lt; (3),
                     KeyAgreement      = 1 &lt;&lt; (4),
                     KeyCertSign       = 1 &lt;&lt; (5),
                     CrlSign           = 1 &lt;&lt; (6),
                     EncipherOnly      = 1 &lt;&lt; (7),
                     DecipherOnly      = 1 &lt;&lt; (8),
                 }
               </code>
            
               Note that while the example here uses the KeyUsage NamedBitList from
               <a href="https://tools.ietf.org/html/rfc3280#section-4.2.1.3">RFC 3280 (4.2.1.3)</a>,
               the example enum uses values thar are different from
               System.Security.Cryptography.X509Certificates.X509KeyUsageFlags.
             </remarks>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadNamedBitListValue(System.Type)">
            <summary>
              Reads the next value as a NamedBitList with tag UNIVERSAL 3, converting it to the
              [<see cref="T:System.FlagsAttribute"/>] enum specfied by <paramref name="tFlagsEnum"/>.
            </summary>
            <param name="tFlagsEnum">Type object representing the destination type.</param>
            <returns>
              the NamedBitList value converted to a <paramref name="tFlagsEnum"/>.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules --OR--
              the encoded value is too big to fit in a <paramref name="tFlagsEnum"/> value
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="tFlagsEnum"/> is not an enum type --OR--
              <paramref name="tFlagsEnum"/> was not declared with <see cref="T:System.FlagsAttribute"/>
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadNamedBitListValue``1(System.Security.Cryptography.Asn1.Asn1Tag)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadNamedBitListValue(System.Security.Cryptography.Asn1.Asn1Tag,System.Type)">
            <summary>
              Reads the next value as a NamedBitList with tag UNIVERSAL 3, converting it to the
              [<see cref="T:System.FlagsAttribute"/>] enum specfied by <paramref name="tFlagsEnum"/>.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="tFlagsEnum">Type object representing the destination type.</param>
            <returns>
              the NamedBitList value converted to a <paramref name="tFlagsEnum"/>.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules --OR---
              the encoded value is too big to fit in a <paramref name="tFlagsEnum"/> value
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="tFlagsEnum"/> is not an enum type --OR--
              <paramref name="tFlagsEnum"/> was not declared with <see cref="T:System.FlagsAttribute"/>
              --OR--
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadNamedBitListValue``1(System.Security.Cryptography.Asn1.Asn1Tag)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadNull">
            <summary>
              Reads the next value as a NULL with tag UNIVERSAL 5.
            </summary>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadNull(System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Reads the next value as a NULL with a specified tag.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.TryCopyOctetStringBytes(System.Span{System.Byte},System.Int32@)">
            <summary>
              Reads the next value as an OCTET STRING with tag UNIVERSAL 4, copying the value
              into a provided destination buffer.
            </summary>
            <param name="destination">The buffer in which to write.</param>
            <param name="bytesWritten">
              On success, receives the number of bytes written to <paramref name="destination"/>.
            </param>
            <returns>
              <c>true</c> and advances the reader if <paramref name="destination"/> had sufficient
              length to receive the value, otherwise
              <c>false</c> and the reader does not advance.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.TryReadPrimitiveOctetStringBytes(System.ReadOnlySpan{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadOctetString"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.TryCopyOctetStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Span{System.Byte},System.Int32@)">
            <summary>
              Reads the next value as an OCTET STRING with a specified tag, copying the value
              into a provided destination buffer.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="destination">The buffer in which to write.</param>
            <param name="bytesWritten">
              On success, receives the number of bytes written to <paramref name="destination"/>.
            </param>
            <returns>
              <c>true</c> and advances the reader if <paramref name="destination"/> had sufficient
              length to receive the value, otherwise
              <c>false</c> and the reader does not advance.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.TryReadPrimitiveOctetStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.ReadOnlySpan{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadOctetString(System.Security.Cryptography.Asn1.Asn1Tag)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadOctetString">
            <summary>
              Reads the next value as an OCTET STRING with tag UNIVERSAL 4, returning the value
              in a byte array.
            </summary>
            <returns>
              a copy of the contents in a newly allocated, precisely sized, array.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.TryReadPrimitiveOctetStringBytes(System.ReadOnlySpan{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.TryCopyOctetStringBytes(System.Span{System.Byte},System.Int32@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadOctetString(System.Security.Cryptography.Asn1.Asn1Tag)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadOctetString(System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Reads the next value as an OCTET STRING with tag UNIVERSAL 4, returning the value
              in a byte array.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <returns>
              a copy of the value in a newly allocated, precisely sized, array.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.TryReadPrimitiveOctetStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.ReadOnlySpan{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.TryCopyOctetStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Span{System.Byte},System.Int32@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadOctetString"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.TryReadPrimitiveOctetStringBytes(System.ReadOnlySpan{System.Byte}@)">
            <summary>
              Reads the next value as an OCTET STRING with tag UNIVERSAL 4, returning the contents
              as a <see cref="T:System.ReadOnlySpan`1"/> over the original data.
            </summary>
            <param name="contents">
              On success, receives a <see cref="T:System.ReadOnlySpan`1"/> over the original data
              corresponding to the contents of the OCTET STRING.
            </param>
            <returns>
              <c>true</c> and advances the reader if the OCTET STRING value had a primitive encoding,
              <c>false</c> and does not advance the reader if it had a constructed encoding.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.TryCopyOctetStringBytes(System.Span{System.Byte},System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.TryReadPrimitiveOctetStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.ReadOnlySpan{System.Byte}@)">
            <summary>
              Reads the next value as an OCTET STRING with a specified tag, returning the contents
              as a <see cref="T:System.ReadOnlySpan`1"/> over the original data.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="contents">
              On success, receives a <see cref="T:System.ReadOnlySpan`1"/> over the original data
              corresponding to the value of the OCTET STRING.
            </param>
            <returns>
              <c>true</c> and advances the reader if the OCTET STRING value had a primitive encoding,
              <c>false</c> and does not advance the reader if it had a constructed encoding.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.TryCopyOctetStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Span{System.Byte},System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadObjectIdentifierAsString">
            <summary>
              Reads the next value as an OBJECT IDENTIFIER with tag UNIVERSAL 6, returning
              the value in a dotted decimal format string.
            </summary>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadObjectIdentifierAsString(System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Reads the next value as an OBJECT IDENTIFIER with a specified tag, returning
              the value in a dotted decimal format string.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadObjectIdentifier">
            <summary>
              Reads the next value as an OBJECT IDENTIFIER with tag UNIVERSAL 6, returning
              the value as an <see cref="T:System.Security.Cryptography.Oid"/>.
            </summary>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadObjectIdentifier(System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Reads the next value as an OBJECT IDENTIFIER with a specified tag, returning
              the value as an <see cref="T:System.Security.Cryptography.Oid"/>.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadSequence">
            <summary>
              Reads the next value as a SEQUENCE or SEQUENCE-OF with tag UNIVERSAL 16
              and returns the result as an <see cref="T:System.Security.Cryptography.Asn1.AsnValueReader"/> positioned at the first
              value in the sequence (or with <see cref="P:System.Security.Cryptography.Asn1.AsnValueReader.HasData"/> == <c>false</c>).
            </summary>
            <returns>
              an <see cref="T:System.Security.Cryptography.Asn1.AsnValueReader"/> positioned at the first
              value in the sequence (or with <see cref="P:System.Security.Cryptography.Asn1.AsnValueReader.HasData"/> == <c>false</c>).
            </returns>
            <remarks>
              the nested content is not evaluated by this method, and may contain data
              which is not valid under the current encoding rules.
            </remarks>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <see cref="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadSequence(System.Security.Cryptography.Asn1.Asn1Tag)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadSequence(System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Reads the next value as a SEQUENCE or SEQUENCE-OF with the specified tag
              and returns the result as an <see cref="T:System.Security.Cryptography.Asn1.AsnValueReader"/> positioned at the first
              value in the sequence (or with <see cref="P:System.Security.Cryptography.Asn1.AsnValueReader.HasData"/> == <c>false</c>).
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <returns>
              an <see cref="T:System.Security.Cryptography.Asn1.AsnValueReader"/> positioned at the first
              value in the sequence (or with <see cref="P:System.Security.Cryptography.Asn1.AsnValueReader.HasData"/> == <c>false</c>).
            </returns>
            <remarks>
              the nested content is not evaluated by this method, and may contain data
              which is not valid under the current encoding rules.
            </remarks>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadSetOf(System.Boolean)">
            <summary>
              Reads the next value as a SET-OF with the specified tag
              and returns the result as an <see cref="T:System.Security.Cryptography.Asn1.AsnValueReader"/> positioned at the first
              value in the set-of (or with <see cref="P:System.Security.Cryptography.Asn1.AsnValueReader.HasData"/> == <c>false</c>).
            </summary>
            <param name="skipSortOrderValidation">
              <c>true</c> to always accept the data in the order it is presented,
              <c>false</c> to verify that the data is sorted correctly when the
              encoding rules say sorting was required (CER and DER).
            </param>
            <returns>
              an <see cref="T:System.Security.Cryptography.Asn1.AsnValueReader"/> positioned at the first
              value in the set-of (or with <see cref="P:System.Security.Cryptography.Asn1.AsnValueReader.HasData"/> == <c>false</c>).
            </returns>
            <remarks>
              the nested content is not evaluated by this method (aside from sort order, when
              required), and may contain data which is not valid under the current encoding rules.
            </remarks>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadSetOf(System.Security.Cryptography.Asn1.Asn1Tag,System.Boolean)">
            <summary>
              Reads the next value as a SET-OF with the specified tag
              and returns the result as an <see cref="T:System.Security.Cryptography.Asn1.AsnValueReader"/> positioned at the first
              value in the set-of (or with <see cref="P:System.Security.Cryptography.Asn1.AsnValueReader.HasData"/> == <c>false</c>).
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="skipSortOrderValidation">
              <c>true</c> to always accept the data in the order it is presented,
              <c>false</c> to verify that the data is sorted correctly when the
              encoding rules say sorting was required (CER and DER).
            </param>
            <returns>
              an <see cref="T:System.Security.Cryptography.Asn1.AsnValueReader"/> positioned at the first
              value in the set-of (or with <see cref="P:System.Security.Cryptography.Asn1.AsnValueReader.HasData"/> == <c>false</c>).
            </returns>
            <remarks>
              the nested content is not evaluated by this method (aside from sort order, when
              required), and may contain data which is not valid under the current encoding rules.
            </remarks>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.TryReadPrimitiveCharacterStringBytes(System.Security.Cryptography.Asn1.UniversalTagNumber,System.ReadOnlySpan{System.Byte}@)">
            <summary>
              Reads the next value as character string with a UNIVERSAL tag appropriate to the specified
              encoding type, returning the contents as an unprocessed <see cref="T:System.ReadOnlySpan`1"/>
              over the original data.
            </summary>
            <param name="encodingType">
              A <see cref="T:System.Security.Cryptography.Asn1.UniversalTagNumber"/> corresponding to the value type to process.
            </param>
            <param name="contents">
              On success, receives a <see cref="T:System.ReadOnlySpan`1"/> over the original data
              corresponding to the contents of the character string.
            </param>
            <returns>
              <c>true</c> and advances the reader if the value had a primitive encoding,
              <c>false</c> and does not advance the reader if it had a constructed encoding.
            </returns>
            <remarks>
              This method does not determine if the string used only characters defined by the encoding.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="encodingType"/> is not a known character string type.
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.TryCopyCharacterStringBytes(System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Byte},System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.TryReadPrimitiveCharacterStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.ReadOnlySpan{System.Byte}@)">
            <summary>
              Reads the next value as a character with a specified tag, returning the contents
              as an unprocessed <see cref="T:System.ReadOnlySpan`1"/> over the original data.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="encodingType">
              A <see cref="T:System.Security.Cryptography.Asn1.UniversalTagNumber"/> corresponding to the value type to process.
            </param>
            <param name="contents">
              On success, receives a <see cref="T:System.ReadOnlySpan`1"/> over the original data
              corresponding to the value of the OCTET STRING.
            </param>
            <returns>
              <c>true</c> and advances the reader if the OCTET STRING value had a primitive encoding,
              <c>false</c> and does not advance the reader if it had a constructed encoding.
            </returns>
            <remarks>
              This method does not determine if the string used only characters defined by the encoding.
            </remarks>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not the same as
              <paramref name="encodingType"/>.
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.TryCopyCharacterStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Byte},System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.TryCopyCharacterStringBytes(System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Byte},System.Int32@)">
            <summary>
              Reads the next value as character string with a UNIVERSAL tag appropriate to the specified
              encoding type, copying the value into a provided destination buffer.
            </summary>
            <param name="encodingType">
              A <see cref="T:System.Security.Cryptography.Asn1.UniversalTagNumber"/> corresponding to the value type to process.
            </param>
            <param name="destination">The buffer in which to write.</param>
            <param name="bytesWritten">
              On success, receives the number of bytes written to <paramref name="destination"/>.
            </param>
            <returns>
              <c>true</c> and advances the reader if <paramref name="destination"/> had sufficient
              length to receive the value, otherwise
              <c>false</c> and the reader does not advance.
            </returns>
            <remarks>
              This method does not determine if the string used only characters defined by the encoding.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="encodingType"/> is not a known character string type.
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.TryReadPrimitiveCharacterStringBytes(System.Security.Cryptography.Asn1.UniversalTagNumber,System.ReadOnlySpan{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadCharacterString(System.Security.Cryptography.Asn1.UniversalTagNumber)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.TryCopyCharacterString(System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Char},System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.TryCopyCharacterStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Byte},System.Int32@)">
            <summary>
              Reads the next value as character string with the specified tag and
              encoding type, copying the value into a provided destination buffer.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="encodingType">
              A <see cref="T:System.Security.Cryptography.Asn1.UniversalTagNumber"/> corresponding to the value type to process.
            </param>
            <param name="destination">The buffer in which to write.</param>
            <param name="bytesWritten">
              On success, receives the number of bytes written to <paramref name="destination"/>.
            </param>
            <returns>
              <c>true</c> and advances the reader if <paramref name="destination"/> had sufficient
              length to receive the value, otherwise
              <c>false</c> and the reader does not advance.
            </returns>
            <remarks>
              This method does not determine if the string used only characters defined by the encoding.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="encodingType"/> is not a known character string type.
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not the same as
              <paramref name="encodingType"/>.
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.TryReadPrimitiveCharacterStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.ReadOnlySpan{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadCharacterString(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.TryCopyCharacterString(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Char},System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.TryCopyCharacterStringBytes(System.Security.Cryptography.Asn1.UniversalTagNumber,System.ArraySegment{System.Byte},System.Int32@)">
            <summary>
              Reads the next value as character string with a UNIVERSAL tag appropriate to the specified
              encoding type, copying the value into a provided destination buffer.
            </summary>
            <param name="encodingType">
              A <see cref="T:System.Security.Cryptography.Asn1.UniversalTagNumber"/> corresponding to the value type to process.
            </param>
            <param name="destination">The buffer in which to write.</param>
            <param name="bytesWritten">
              On success, receives the number of bytes written to <paramref name="destination"/>.
            </param>
            <returns>
              <c>true</c> and advances the reader if <paramref name="destination"/> had sufficient
              length to receive the value, otherwise
              <c>false</c> and the reader does not advance.
            </returns>
            <remarks>
              This method does not determine if the string used only characters defined by the encoding.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="encodingType"/> is not a known character string type.
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.TryReadPrimitiveCharacterStringBytes(System.Security.Cryptography.Asn1.UniversalTagNumber,System.ReadOnlySpan{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadCharacterString(System.Security.Cryptography.Asn1.UniversalTagNumber)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.TryCopyCharacterString(System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Char},System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.TryCopyCharacterStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.ArraySegment{System.Byte},System.Int32@)">
            <summary>
              Reads the next value as character string with the specified tag and
              encoding type, copying the value into a provided destination buffer.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="encodingType">
              A <see cref="T:System.Security.Cryptography.Asn1.UniversalTagNumber"/> corresponding to the value type to process.
            </param>
            <param name="destination">The buffer in which to write.</param>
            <param name="bytesWritten">
              On success, receives the number of bytes written to <paramref name="destination"/>.
            </param>
            <returns>
              <c>true</c> and advances the reader if <paramref name="destination"/> had sufficient
              length to receive the value, otherwise
              <c>false</c> and the reader does not advance.
            </returns>
            <remarks>
              This method does not determine if the string used only characters defined by the encoding.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="encodingType"/> is not a known character string type.
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not the same as
              <paramref name="encodingType"/>.
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.TryReadPrimitiveCharacterStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.ReadOnlySpan{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadCharacterString(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.TryCopyCharacterString(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Char},System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.TryCopyCharacterString(System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Char},System.Int32@)">
            <summary>
              Reads the next value as character string with a UNIVERSAL tag appropriate to the specified
              encoding type, copying the decoded value into a provided destination buffer.
            </summary>
            <param name="encodingType">
              A <see cref="T:System.Security.Cryptography.Asn1.UniversalTagNumber"/> corresponding to the value type to process.
            </param>
            <param name="destination">The buffer in which to write.</param>
            <param name="charsWritten">
              On success, receives the number of chars written to <paramref name="destination"/>.
            </param>
            <returns>
              <c>true</c> and advances the reader if <paramref name="destination"/> had sufficient
              length to receive the value, otherwise
              <c>false</c> and the reader does not advance.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="encodingType"/> is not a known character string type.
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules --OR--
              the string did not successfully decode
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.TryReadPrimitiveCharacterStringBytes(System.Security.Cryptography.Asn1.UniversalTagNumber,System.ReadOnlySpan{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadCharacterString(System.Security.Cryptography.Asn1.UniversalTagNumber)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.TryCopyCharacterStringBytes(System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Byte},System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.TryCopyCharacterString(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Char},System.Int32@)">
            <summary>
              Reads the next value as character string with the specified tag and
              encoding type, copying the decoded value into a provided destination buffer.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="encodingType">
              A <see cref="T:System.Security.Cryptography.Asn1.UniversalTagNumber"/> corresponding to the value type to process.
            </param>
            <param name="destination">The buffer in which to write.</param>
            <param name="charsWritten">
              On success, receives the number of chars written to <paramref name="destination"/>.
            </param>
            <returns>
              <c>true</c> and advances the reader if <paramref name="destination"/> had sufficient
              length to receive the value, otherwise
              <c>false</c> and the reader does not advance.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="encodingType"/> is not a known character string type.
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules --OR--
              the string did not successfully decode
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not the same as
              <paramref name="encodingType"/>.
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.TryReadPrimitiveCharacterStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.ReadOnlySpan{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.TryCopyCharacterStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Byte},System.Int32@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadCharacterString(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadCharacterString(System.Security.Cryptography.Asn1.UniversalTagNumber)">
            <summary>
              Reads the next value as character string with a UNIVERSAL tag appropriate to the specified
              encoding type, returning the decoded value as a <see cref="T:System.String"/>.
            </summary>
            <param name="encodingType">
              A <see cref="T:System.Security.Cryptography.Asn1.UniversalTagNumber"/> corresponding to the value type to process.
            </param>
            <returns>
              the decoded value as a <see cref="T:System.String"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="encodingType"/> is not a known character string type.
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules --OR--
              the string did not successfully decode
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.TryReadPrimitiveCharacterStringBytes(System.Security.Cryptography.Asn1.UniversalTagNumber,System.ReadOnlySpan{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.TryCopyCharacterStringBytes(System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Byte},System.Int32@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.TryCopyCharacterString(System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Char},System.Int32@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadCharacterString(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadCharacterString(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber)">
            <summary>
              Reads the next value as character string with the specified tag and
              encoding type, returning the decoded value as a <see cref="T:System.String"/>.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="encodingType">
              A <see cref="T:System.Security.Cryptography.Asn1.UniversalTagNumber"/> corresponding to the value type to process.
            </param>
            <returns>
              the decoded value as a <see cref="T:System.String"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="encodingType"/> is not a known character string type.
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules --OR--
              the string did not successfully decode
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not the same as
              <paramref name="encodingType"/>.
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.TryReadPrimitiveCharacterStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.ReadOnlySpan{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.TryCopyCharacterStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Byte},System.Int32@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.TryCopyCharacterString(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Char},System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadUtcTime(System.Int32)">
            <summary>
              Reads the next value as a UTCTime with tag UNIVERSAL 23.
            </summary>
            <param name="twoDigitYearMax">
              The largest year to represent with this value.
              The default value, 2049, represents the 1950-2049 range for X.509 certificates.
            </param>
            <returns>
              a DateTimeOffset representing the value encoded in the UTCTime.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <seealso cref="P:System.Globalization.Calendar.TwoDigitYearMax"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadUtcTime(System.Security.Cryptography.Asn1.Asn1Tag,System.Int32)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnValueReader.ReadUtcTime(System.Security.Cryptography.Asn1.Asn1Tag,System.Int32)">
            <summary>
              Reads the next value as a UTCTime with a specified tag.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="twoDigitYearMax">
              The largest year to represent with this value.
              The default value, 2049, represents the 1950-2049 range for X.509 certificates.
            </param>
            <returns>
              a DateTimeOffset representing the value encoded in the UTCTime.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <seealso cref="P:System.Globalization.Calendar.TwoDigitYearMax"/>
        </member>
        <member name="T:System.Security.Cryptography.Asn1.AsnReader">
            <summary>
              A stateful, forward-only reader for BER-, CER-, or DER-encoded ASN.1 data.
            </summary>
        </member>
        <member name="P:System.Security.Cryptography.Asn1.AsnReader.RuleSet">
            <summary>
              The <see cref="T:System.Security.Cryptography.Asn1.AsnEncodingRules"/> in use by this reader.
            </summary>
        </member>
        <member name="P:System.Security.Cryptography.Asn1.AsnReader.HasData">
            <summary>
              An indication of whether or not the reader has remaining data available to process.
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.#ctor(System.ReadOnlyMemory{System.Byte},System.Security.Cryptography.Asn1.AsnEncodingRules)">
             <summary>
               Construct an <see cref="T:System.Security.Cryptography.Asn1.AsnReader"/> over <paramref name="data"/> with a given ruleset.
             </summary>
             <param name="data">The data to read.</param>
             <param name="ruleSet">The encoding constraints for the reader.</param>
             <remarks>
               This constructor does not evaluate <paramref name="data"/> for correctness,
               any correctness checks are done as part of member methods.
            
               This constructor does not copy <paramref name="data"/>. The caller is responsible for
               ensuring that the values do not change until the reader is finished.
             </remarks>
             <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="ruleSet"/> is not defined.
             </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ThrowIfNotEmpty">
            <summary>
              Throws a standardized <see cref="T:System.Security.Cryptography.CryptographicException"/> if the reader has remaining
              data, performs no function if <see cref="P:System.Security.Cryptography.Asn1.AsnReader.HasData"/> returns <c>false</c>.
            </summary>
            <remarks>
              This method provides a standardized target and standardized exception for reading a
              "closed" structure, such as the nested content for an explicitly tagged value.
            </remarks>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.PeekTag">
            <summary>
              Read the encoded tag at the next data position, without advancing the reader.
            </summary>
            <returns>
              The decoded <see cref="T:System.Security.Cryptography.Asn1.Asn1Tag"/> value.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              a tag could not be decoded at the reader's current position.
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.PeekEncodedValue">
            <summary>
              Get a <see cref="T:System.ReadOnlyMemory`1"/> view of the next encoded value without
              advancing the reader. For indefinite length encodings this includes the
              End of Contents marker.
            </summary>
            <returns>A <see cref="T:System.ReadOnlyMemory`1"/> view of the next encoded value.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              The reader is positioned at a point where the tag or length is invalid
              under the current encoding rules.
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.PeekContentBytes"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadEncodedValue"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.PeekContentBytes">
            <summary>
              Get a <see cref="T:System.ReadOnlyMemory`1"/> view of the content octets (bytes) of the
              next encoded value without advancing the reader.
            </summary>
            <returns>
              A <see cref="T:System.ReadOnlyMemory`1"/> view of the contents octets of the next encoded value.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              The reader is positioned at a point where the tag or length is invalid
              under the current encoding rules.
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.PeekEncodedValue"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadEncodedValue">
            <summary>
              Get a <see cref="T:System.ReadOnlyMemory`1"/> view of the next encoded value,
              and advance the reader past it. For an indefinite length encoding this includes
              the End of Contents marker.
            </summary>
            <returns>A <see cref="T:System.ReadOnlyMemory`1"/> view of the next encoded value.</returns>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.PeekEncodedValue"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveBitStringValue(System.Int32@,System.ReadOnlyMemory{System.Byte}@)">
            <summary>
              Reads the next value as a BIT STRING with tag UNIVERSAL 3, returning the contents
              as a <see cref="T:System.ReadOnlyMemory`1"/> over the original data.
            </summary>
            <param name="unusedBitCount">
              On success, receives the number of bits in the last byte which were reported as
              "unused" by the writer.
            </param>
            <param name="value">
              On success, receives a <see cref="T:System.ReadOnlyMemory`1"/> over the original data
              corresponding to the value of the BIT STRING.
            </param>
            <returns>
              <c>true</c> and advances the reader if the BIT STRING value had a primitive encoding,
              <c>false</c> and does not advance the reader if it had a constructed encoding.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyBitStringBytes(System.Span{System.Byte},System.Int32@,System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveBitStringValue(System.Security.Cryptography.Asn1.Asn1Tag,System.Int32@,System.ReadOnlyMemory{System.Byte}@)">
            <summary>
              Reads the next value as a BIT STRING with a specified tag, returning the contents
              as a <see cref="T:System.ReadOnlyMemory`1"/> over the original data.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="unusedBitCount">
              On success, receives the number of bits in the last byte which were reported as
              "unused" by the writer.
            </param>
            <param name="value">
              On success, receives a <see cref="T:System.ReadOnlyMemory`1"/> over the original data
              corresponding to the value of the BIT STRING.
            </param>
            <returns>
              <c>true</c> and advances the reader if the BIT STRING value had a primitive encoding,
              <c>false</c> and does not advance the reader if it had a constructed encoding.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyBitStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Span{System.Byte},System.Int32@,System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyBitStringBytes(System.Span{System.Byte},System.Int32@,System.Int32@)">
            <summary>
              Reads the next value as a BIT STRING with tag UNIVERSAL 3, copying the value
              into a provided destination buffer.
            </summary>
            <param name="destination">The buffer in which to write.</param>
            <param name="unusedBitCount">
              On success, receives the number of bits in the last byte which were reported as
              "unused" by the writer.
            </param>
            <param name="bytesWritten">
              On success, receives the number of bytes written to <paramref name="destination"/>.
            </param>
            <returns>
              <c>true</c> and advances the reader if <paramref name="destination"/> had sufficient
              length to receive the value, otherwise
              <c>false</c> and the reader does not advance.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveBitStringValue(System.Int32@,System.ReadOnlyMemory{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadBitString(System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyBitStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Span{System.Byte},System.Int32@,System.Int32@)">
            <summary>
              Reads the next value as a BIT STRING with a specified tag, copying the value
              into a provided destination buffer.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="destination">The buffer in which to write.</param>
            <param name="unusedBitCount">
              On success, receives the number of bits in the last byte which were reported as
              "unused" by the writer.
            </param>
            <param name="bytesWritten">
              On success, receives the number of bytes written to <paramref name="destination"/>.
            </param>
            <returns>
              <c>true</c> and advances the reader if <paramref name="destination"/> had sufficient
              length to receive the value, otherwise
              <c>false</c> and the reader does not advance.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveBitStringValue(System.Security.Cryptography.Asn1.Asn1Tag,System.Int32@,System.ReadOnlyMemory{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadBitString(System.Security.Cryptography.Asn1.Asn1Tag,System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyBitStringBytes(System.ArraySegment{System.Byte},System.Int32@,System.Int32@)">
            <summary>
              Reads the next value as a BIT STRING with tag UNIVERSAL 3, copying the value
              into a provided destination buffer.
            </summary>
            <param name="destination">The buffer in which to write.</param>
            <param name="unusedBitCount">
              On success, receives the number of bits in the last byte which were reported as
              "unused" by the writer.
            </param>
            <param name="bytesWritten">
              On success, receives the number of bytes written to <paramref name="destination"/>.
            </param>
            <returns>
              <c>true</c> and advances the reader if <paramref name="destination"/> had sufficient
              length to receive the value, otherwise
              <c>false</c> and the reader does not advance.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveBitStringValue(System.Int32@,System.ReadOnlyMemory{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadBitString(System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyBitStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.ArraySegment{System.Byte},System.Int32@,System.Int32@)">
            <summary>
              Reads the next value as a BIT STRING with a specified tag, copying the value
              into a provided destination buffer.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="destination">The buffer in which to write.</param>
            <param name="unusedBitCount">
              On success, receives the number of bits in the last byte which were reported as
              "unused" by the writer.
            </param>
            <param name="bytesWritten">
              On success, receives the number of bytes written to <paramref name="destination"/>.
            </param>
            <returns>
              <c>true</c> and advances the reader if <paramref name="destination"/> had sufficient
              length to receive the value, otherwise
              <c>false</c> and the reader does not advance.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveBitStringValue(System.Security.Cryptography.Asn1.Asn1Tag,System.Int32@,System.ReadOnlyMemory{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadBitString(System.Security.Cryptography.Asn1.Asn1Tag,System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadBitString(System.Int32@)">
            <summary>
              Reads the next value as a BIT STRING with tag UNIVERSAL 3, returning the value
              in a byte array.
            </summary>
            <param name="unusedBitCount">
              On success, receives the number of bits in the last byte which were reported as
              "unused" by the writer.
            </param>
            <returns>
              a copy of the value in a newly allocated, precisely sized, array.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveBitStringValue(System.Int32@,System.ReadOnlyMemory{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyBitStringBytes(System.Span{System.Byte},System.Int32@,System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadBitString(System.Security.Cryptography.Asn1.Asn1Tag,System.Int32@)">
            <summary>
              Reads the next value as a BIT STRING with tag UNIVERSAL 3, returning the value
              in a byte array.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="unusedBitCount">
              On success, receives the number of bits in the last byte which were reported as
              "unused" by the writer.
            </param>
            <returns>
              a copy of the value in a newly allocated, precisely sized, array.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveBitStringValue(System.Security.Cryptography.Asn1.Asn1Tag,System.Int32@,System.ReadOnlyMemory{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyBitStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Span{System.Byte},System.Int32@,System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadBoolean">
            <summary>
              Reads the next value as a Boolean with tag UNIVERSAL 1.
            </summary>
            <returns>The next value as a Boolean.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadBoolean(System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Reads the next value as a Boolean with a specified tag.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <returns>The next value as a Boolean.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadEnumeratedBytes">
            <summary>
              Reads the next value as an Enumerated value with tag UNIVERSAL 10,
              returning the contents as a <see cref="T:System.ReadOnlyMemory`1"/> over the original data.
            </summary>
            <returns>
              The bytes of the Enumerated value, in signed big-endian form.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadEnumeratedValue``1"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadEnumeratedBytes(System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Reads the next value as a Enumerated with a specified tag, returning the contents
              as a <see cref="T:System.ReadOnlyMemory`1"/> over the original data.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <returns>
              The bytes of the Enumerated value, in signed big-endian form.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadEnumeratedValue``1(System.Security.Cryptography.Asn1.Asn1Tag)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadEnumeratedValue``1">
            <summary>
              Reads the next value as an Enumerated value with tag UNIVERSAL 10, converting it to
              the non-[<see cref="T:System.FlagsAttribute"/>] enum specfied by <typeparamref name="TEnum"/>.
            </summary>
            <typeparam name="TEnum">Destination enum type</typeparam>
            <returns>
              the Enumerated value converted to a <typeparamref name="TEnum"/>.
            </returns>
            <remarks>
              This method does not validate that the return value is defined within
              <typeparamref name="TEnum"/>.
            </remarks>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules --OR--
              the encoded value is too big to fit in a <typeparamref name="TEnum"/> value
            </exception>
            <exception cref="T:System.ArgumentException">
              <typeparamref name="TEnum"/> is not an enum type --OR--
              <typeparamref name="TEnum"/> was declared with <see cref="T:System.FlagsAttribute"/>
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadEnumeratedValue``1(System.Security.Cryptography.Asn1.Asn1Tag)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadEnumeratedValue``1(System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Reads the next value as an Enumerated with tag UNIVERSAL 10, converting it to the
              non-[<see cref="T:System.FlagsAttribute"/>] enum specfied by <typeparamref name="TEnum"/>.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <typeparam name="TEnum">Destination enum type</typeparam>
            <returns>
              the Enumerated value converted to a <typeparamref name="TEnum"/>.
            </returns>
            <remarks>
              This method does not validate that the return value is defined within
              <typeparamref name="TEnum"/>.
            </remarks>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules --OR--
              the encoded value is too big to fit in a <typeparamref name="TEnum"/> value
            </exception>
            <exception cref="T:System.ArgumentException">
              <typeparamref name="TEnum"/> is not an enum type --OR--
              <typeparamref name="TEnum"/> was declared with <see cref="T:System.FlagsAttribute"/>
              --OR--
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadEnumeratedValue(System.Type)">
            <summary>
              Reads the next value as an Enumerated value with tag UNIVERSAL 10, converting it to
              the non-[<see cref="T:System.FlagsAttribute"/>] enum specfied by <paramref name="tEnum"/>.
            </summary>
            <param name="tEnum">Type object representing the destination type.</param>
            <returns>
              the Enumerated value converted to a <paramref name="tEnum"/>.
            </returns>
            <remarks>
              This method does not validate that the return value is defined within
              <paramref name="tEnum"/>.
            </remarks>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules --OR--
              the encoded value is too big to fit in a <paramref name="tEnum"/> value
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="tEnum"/> is not an enum type --OR--
              <paramref name="tEnum"/> was declared with <see cref="T:System.FlagsAttribute"/>
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadEnumeratedValue(System.Security.Cryptography.Asn1.Asn1Tag,System.Type)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadEnumeratedValue(System.Security.Cryptography.Asn1.Asn1Tag,System.Type)">
            <summary>
              Reads the next value as an Enumerated with tag UNIVERSAL 10, converting it to the
              non-[<see cref="T:System.FlagsAttribute"/>] enum specfied by <paramref name="tEnum"/>.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="tEnum">Type object representing the destination type.</param>
            <returns>
              the Enumerated value converted to a <paramref name="tEnum"/>.
            </returns>
            <remarks>
              This method does not validate that the return value is defined within
              <paramref name="tEnum"/>.
            </remarks>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules --OR--
              the encoded value is too big to fit in a <paramref name="tEnum"/> value
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="tEnum"/> is not an enum type --OR--
              <paramref name="tEnum"/> was declared with <see cref="T:System.FlagsAttribute"/>
              --OR--
              <paramref name="tEnum"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tEnum"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadGeneralizedTime(System.Boolean)">
            <summary>
              Reads the next value as a GeneralizedTime with tag UNIVERSAL 24.
            </summary>
            <param name="disallowFractions">
              <c>true</c> to cause a <see cref="T:System.Security.Cryptography.CryptographicException"/> to be thrown if a
              fractional second is encountered, such as the restriction on the PKCS#7 Signing
              Time attribute.
            </param>
            <returns>
              a DateTimeOffset representing the value encoded in the GeneralizedTime.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadGeneralizedTime(System.Security.Cryptography.Asn1.Asn1Tag,System.Boolean)">
            <summary>
              Reads the next value as a GeneralizedTime with a specified tag.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="disallowFractions">
              <c>true</c> to cause a <see cref="T:System.Security.Cryptography.CryptographicException"/> to be thrown if a
              fractional second is encountered, such as the restriction on the PKCS#7 Signing
              Time attribute.
            </param>
            <returns>
              a DateTimeOffset representing the value encoded in the GeneralizedTime.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadIntegerBytes">
            <summary>
              Reads the next value as an Integer with tag UNIVERSAL 2, returning the contents
              as a <see cref="T:System.ReadOnlyMemory`1"/> over the original data.
            </summary>
            <returns>
              The bytes of the Integer value, in signed big-endian form.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadIntegerBytes(System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Reads the next value as a Integer with a specified tag, returning the contents
              as a <see cref="T:System.ReadOnlyMemory`1"/> over the original data.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <returns>
              The bytes of the Integer value, in signed big-endian form.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadInteger">
            <summary>
              Reads the next value as an Integer with tag UNIVERSAL 2, returning the contents
              as a <see cref="T:System.Numerics.BigInteger"/>.
            </summary>
            <returns>
              The bytes of the Integer value, in signed big-endian form.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadInteger(System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Reads the next value as a Integer with a specified tag, returning the contents
              as a <see cref="T:System.Numerics.BigInteger"/> over the original data.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <returns>
              The bytes of the Integer value, in signed big-endian form.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryReadInt32(System.Int32@)">
            <summary>
              Reads the next value as an Integer with tag UNIVERSAL 2, interpreting the contents
              as an <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">
              On success, receives the <see cref="T:System.Int32"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.Int32.MinValue"/> and <see cref="F:System.Int32.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryReadInt32(System.Security.Cryptography.Asn1.Asn1Tag,System.Int32@)">
            <summary>
              Reads the next value as a Integer with a specified tag, interpreting the contents
              as an <see cref="T:System.Int32"/>.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="value">
              On success, receives the <see cref="T:System.Int32"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.Int32.MinValue"/> and <see cref="F:System.Int32.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryReadUInt32(System.UInt32@)">
            <summary>
              Reads the next value as an Integer with tag UNIVERSAL 2, interpreting the contents
              as a <see cref="T:System.UInt32"/>.
            </summary>
            <param name="value">
              On success, receives the <see cref="T:System.UInt32"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.UInt32.MinValue"/> and <see cref="F:System.UInt32.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryReadUInt32(System.Security.Cryptography.Asn1.Asn1Tag,System.UInt32@)">
            <summary>
              Reads the next value as a Integer with a specified tag, interpreting the contents
              as a <see cref="T:System.UInt32"/>.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="value">
              On success, receives the <see cref="T:System.UInt32"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.UInt32.MinValue"/> and <see cref="F:System.UInt32.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryReadInt64(System.Int64@)">
            <summary>
              Reads the next value as an Integer with tag UNIVERSAL 2, interpreting the contents
              as a <see cref="T:System.Int64"/>.
            </summary>
            <param name="value">
              On success, receives the <see cref="T:System.Int64"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.Int64.MinValue"/> and <see cref="F:System.Int64.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryReadInt64(System.Security.Cryptography.Asn1.Asn1Tag,System.Int64@)">
            <summary>
              Reads the next value as a Integer with a specified tag, interpreting the contents
              as an <see cref="T:System.Int64"/>.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="value">
              On success, receives the <see cref="T:System.Int64"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.Int64.MinValue"/> and <see cref="F:System.Int64.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryReadUInt64(System.UInt64@)">
            <summary>
              Reads the next value as an Integer with tag UNIVERSAL 2, interpreting the contents
              as a <see cref="T:System.UInt64"/>.
            </summary>
            <param name="value">
              On success, receives the <see cref="T:System.UInt64"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.UInt64.MinValue"/> and <see cref="F:System.UInt64.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryReadUInt64(System.Security.Cryptography.Asn1.Asn1Tag,System.UInt64@)">
            <summary>
              Reads the next value as a Integer with a specified tag, interpreting the contents
              as a <see cref="T:System.UInt64"/>.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="value">
              On success, receives the <see cref="T:System.UInt64"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.UInt64.MinValue"/> and <see cref="F:System.UInt64.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryReadInt16(System.Int16@)">
            <summary>
              Reads the next value as an Integer with tag UNIVERSAL 2, interpreting the contents
              as a <see cref="T:System.Int16"/>.
            </summary>
            <param name="value">
              On success, receives the <see cref="T:System.Int16"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.Int16.MinValue"/> and <see cref="F:System.Int16.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryReadInt16(System.Security.Cryptography.Asn1.Asn1Tag,System.Int16@)">
            <summary>
              Reads the next value as a Integer with a specified tag, interpreting the contents
              as an <see cref="T:System.Int16"/>.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="value">
              On success, receives the <see cref="T:System.Int16"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.Int16.MinValue"/> and <see cref="F:System.Int16.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryReadUInt16(System.UInt16@)">
            <summary>
              Reads the next value as an Integer with tag UNIVERSAL 2, interpreting the contents
              as a <see cref="T:System.UInt16"/>.
            </summary>
            <param name="value">
              On success, receives the <see cref="T:System.UInt16"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.UInt16.MinValue"/> and <see cref="F:System.UInt16.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryReadUInt16(System.Security.Cryptography.Asn1.Asn1Tag,System.UInt16@)">
            <summary>
              Reads the next value as a Integer with a specified tag, interpreting the contents
              as a <see cref="T:System.UInt16"/>.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="value">
              On success, receives the <see cref="T:System.UInt16"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.UInt16.MinValue"/> and <see cref="F:System.UInt16.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryReadInt8(System.SByte@)">
            <summary>
              Reads the next value as an Integer with tag UNIVERSAL 2, interpreting the contents
              as an <see cref="T:System.SByte"/>.
            </summary>
            <param name="value">
              On success, receives the <see cref="T:System.SByte"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.SByte.MinValue"/> and <see cref="F:System.SByte.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryReadInt8(System.Security.Cryptography.Asn1.Asn1Tag,System.SByte@)">
            <summary>
              Reads the next value as a Integer with a specified tag, interpreting the contents
              as an <see cref="T:System.SByte"/>.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="value">
              On success, receives the <see cref="T:System.SByte"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.SByte.MinValue"/> and <see cref="F:System.SByte.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the Integer value is not valid
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryReadUInt8(System.Byte@)">
            <summary>
              Reads the next value as an Integer with tag UNIVERSAL 2, interpreting the contents
              as a <see cref="T:System.Byte"/>.
            </summary>
            <param name="value">
              On success, receives the <see cref="T:System.Byte"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.Byte.MinValue"/> and <see cref="F:System.Byte.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryReadUInt8(System.Security.Cryptography.Asn1.Asn1Tag,System.Byte@)">
            <summary>
              Reads the next value as a Integer with a specified tag, interpreting the contents
              as a <see cref="T:System.Byte"/>.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="value">
              On success, receives the <see cref="T:System.Byte"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.Byte.MinValue"/> and <see cref="F:System.Byte.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadNamedBitListValue``1">
            <summary>
              Reads the next value as a NamedBitList with tag UNIVERSAL 3, converting it to the
              [<see cref="T:System.FlagsAttribute"/>] enum specfied by <typeparamref name="TFlagsEnum"/>.
            </summary>
            <typeparam name="TFlagsEnum">Destination enum type</typeparam>
            <returns>
              the NamedBitList value converted to a <typeparamref name="TFlagsEnum"/>.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules --OR--
              the encoded value is too big to fit in a <typeparamref name="TFlagsEnum"/> value
            </exception>
            <exception cref="T:System.ArgumentException">
              <typeparamref name="TFlagsEnum"/> is not an enum type --OR--
              <typeparamref name="TFlagsEnum"/> was not declared with <see cref="T:System.FlagsAttribute"/>
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadNamedBitListValue``1(System.Security.Cryptography.Asn1.Asn1Tag)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadNamedBitListValue``1(System.Security.Cryptography.Asn1.Asn1Tag)">
             <summary>
               Reads the next value as a NamedBitList with tag UNIVERSAL 3, converting it to the
               [<see cref="T:System.FlagsAttribute"/>] enum specfied by <typeparamref name="TFlagsEnum"/>.
             </summary>
             <param name="expectedTag">The tag to check for before reading.</param>
             <typeparam name="TFlagsEnum">Destination enum type</typeparam>
             <returns>
               the NamedBitList value converted to a <typeparamref name="TFlagsEnum"/>.
             </returns>
             <exception cref="T:System.Security.Cryptography.CryptographicException">
               the next value does not have the correct tag --OR--
               the length encoding is not valid under the current encoding rules --OR--
               the contents are not valid under the current encoding rules --OR--
               the encoded value is too big to fit in a <typeparamref name="TFlagsEnum"/> value
             </exception>
             <exception cref="T:System.ArgumentException">
               <typeparamref name="TFlagsEnum"/> is not an enum type --OR--
               <typeparamref name="TFlagsEnum"/> was not declared with <see cref="T:System.FlagsAttribute"/>
               --OR--
               <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
               <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
               <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
               the method
             </exception>
             <remarks>
               The bit alignment performed by this method is to interpret the most significant bit
               in the first byte of the value as the least significant bit in <typeparamref name="TFlagsEnum"/>,
               with bits increasing in value until the least significant bit of the first byte, proceeding
               with the most significant bit of the second byte, and so on. Under this scheme, the following
               ASN.1 type declaration and C# enumeration can be used together:
            
               <code>
                 KeyUsage ::= BIT STRING {
                   digitalSignature   (0),
                   nonRepudiation     (1),
                   keyEncipherment    (2),
                   dataEncipherment   (3),
                   keyAgreement       (4),
                   keyCertSign        (5),
                   cRLSign            (6),
                   encipherOnly       (7),
                   decipherOnly       (8) }
               </code>
            
               <code>
                 [Flags]
                 enum KeyUsage
                 {
                     None              = 0,
                     DigitalSignature  = 1 &lt;&lt; (0),
                     NonRepudiation    = 1 &lt;&lt; (1),
                     KeyEncipherment   = 1 &lt;&lt; (2),
                     DataEncipherment  = 1 &lt;&lt; (3),
                     KeyAgreement      = 1 &lt;&lt; (4),
                     KeyCertSign       = 1 &lt;&lt; (5),
                     CrlSign           = 1 &lt;&lt; (6),
                     EncipherOnly      = 1 &lt;&lt; (7),
                     DecipherOnly      = 1 &lt;&lt; (8),
                 }
               </code>
            
               Note that while the example here uses the KeyUsage NamedBitList from
               <a href="https://tools.ietf.org/html/rfc3280#section-4.2.1.3">RFC 3280 (4.2.1.3)</a>,
               the example enum uses values thar are different from
               System.Security.Cryptography.X509Certificates.X509KeyUsageFlags.
             </remarks>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadNamedBitListValue(System.Type)">
            <summary>
              Reads the next value as a NamedBitList with tag UNIVERSAL 3, converting it to the
              [<see cref="T:System.FlagsAttribute"/>] enum specfied by <paramref name="tFlagsEnum"/>.
            </summary>
            <param name="tFlagsEnum">Type object representing the destination type.</param>
            <returns>
              the NamedBitList value converted to a <paramref name="tFlagsEnum"/>.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules --OR--
              the encoded value is too big to fit in a <paramref name="tFlagsEnum"/> value
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="tFlagsEnum"/> is not an enum type --OR--
              <paramref name="tFlagsEnum"/> was not declared with <see cref="T:System.FlagsAttribute"/>
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadNamedBitListValue``1(System.Security.Cryptography.Asn1.Asn1Tag)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadNamedBitListValue(System.Security.Cryptography.Asn1.Asn1Tag,System.Type)">
            <summary>
              Reads the next value as a NamedBitList with tag UNIVERSAL 3, converting it to the
              [<see cref="T:System.FlagsAttribute"/>] enum specfied by <paramref name="tFlagsEnum"/>.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="tFlagsEnum">Type object representing the destination type.</param>
            <returns>
              the NamedBitList value converted to a <paramref name="tFlagsEnum"/>.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules --OR---
              the encoded value is too big to fit in a <paramref name="tFlagsEnum"/> value
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="tFlagsEnum"/> is not an enum type --OR--
              <paramref name="tFlagsEnum"/> was not declared with <see cref="T:System.FlagsAttribute"/>
              --OR--
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadNamedBitListValue``1(System.Security.Cryptography.Asn1.Asn1Tag)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadNull">
            <summary>
              Reads the next value as a NULL with tag UNIVERSAL 5.
            </summary>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadNull(System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Reads the next value as a NULL with a specified tag.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyOctetStringBytes(System.Span{System.Byte},System.Int32@)">
            <summary>
              Reads the next value as an OCTET STRING with tag UNIVERSAL 4, copying the value
              into a provided destination buffer.
            </summary>
            <param name="destination">The buffer in which to write.</param>
            <param name="bytesWritten">
              On success, receives the number of bytes written to <paramref name="destination"/>.
            </param>
            <returns>
              <c>true</c> and advances the reader if <paramref name="destination"/> had sufficient
              length to receive the value, otherwise
              <c>false</c> and the reader does not advance.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveOctetStringBytes(System.ReadOnlyMemory{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadOctetString"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyOctetStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Span{System.Byte},System.Int32@)">
            <summary>
              Reads the next value as an OCTET STRING with a specified tag, copying the value
              into a provided destination buffer.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="destination">The buffer in which to write.</param>
            <param name="bytesWritten">
              On success, receives the number of bytes written to <paramref name="destination"/>.
            </param>
            <returns>
              <c>true</c> and advances the reader if <paramref name="destination"/> had sufficient
              length to receive the value, otherwise
              <c>false</c> and the reader does not advance.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveOctetStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.ReadOnlyMemory{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadOctetString(System.Security.Cryptography.Asn1.Asn1Tag)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyOctetStringBytes(System.ArraySegment{System.Byte},System.Int32@)">
            <summary>
              Reads the next value as an OCTET STRING with tag UNIVERSAL 4, copying the value
              into a provided destination buffer.
            </summary>
            <param name="destination">The buffer in which to write.</param>
            <param name="bytesWritten">
              On success, receives the number of bytes written to <paramref name="destination"/>.
            </param>
            <returns>
              <c>true</c> and advances the reader if <paramref name="destination"/> had sufficient
              length to receive the value, otherwise
              <c>false</c> and the reader does not advance.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveOctetStringBytes(System.ReadOnlyMemory{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadOctetString"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyOctetStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.ArraySegment{System.Byte},System.Int32@)">
            <summary>
              Reads the next value as an OCTET STRING with a specified tag, copying the value
              into a provided destination buffer.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="destination">The buffer in which to write.</param>
            <param name="bytesWritten">
              On success, receives the number of bytes written to <paramref name="destination"/>.
            </param>
            <returns>
              <c>true</c> and advances the reader if <paramref name="destination"/> had sufficient
              length to receive the value, otherwise
              <c>false</c> and the reader does not advance.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveOctetStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.ReadOnlyMemory{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadOctetString(System.Security.Cryptography.Asn1.Asn1Tag)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadOctetString">
            <summary>
              Reads the next value as an OCTET STRING with tag UNIVERSAL 4, returning the value
              in a byte array.
            </summary>
            <returns>
              a copy of the contents in a newly allocated, precisely sized, array.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveOctetStringBytes(System.ReadOnlyMemory{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyOctetStringBytes(System.Span{System.Byte},System.Int32@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadOctetString(System.Security.Cryptography.Asn1.Asn1Tag)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadOctetString(System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Reads the next value as an OCTET STRING with tag UNIVERSAL 4, returning the value
              in a byte array.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <returns>
              a copy of the value in a newly allocated, precisely sized, array.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveOctetStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.ReadOnlyMemory{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyOctetStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Span{System.Byte},System.Int32@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadOctetString"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveOctetStringBytes(System.ReadOnlyMemory{System.Byte}@)">
            <summary>
              Reads the next value as an OCTET STRING with tag UNIVERSAL 4, returning the contents
              as a <see cref="T:System.ReadOnlyMemory`1"/> over the original data.
            </summary>
            <param name="contents">
              On success, receives a <see cref="T:System.ReadOnlyMemory`1"/> over the original data
              corresponding to the contents of the OCTET STRING.
            </param>
            <returns>
              <c>true</c> and advances the reader if the OCTET STRING value had a primitive encoding,
              <c>false</c> and does not advance the reader if it had a constructed encoding.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyOctetStringBytes(System.Span{System.Byte},System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveOctetStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.ReadOnlyMemory{System.Byte}@)">
            <summary>
              Reads the next value as an OCTET STRING with a specified tag, returning the contents
              as a <see cref="T:System.ReadOnlyMemory`1"/> over the original data.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="contents">
              On success, receives a <see cref="T:System.ReadOnlyMemory`1"/> over the original data
              corresponding to the value of the OCTET STRING.
            </param>
            <returns>
              <c>true</c> and advances the reader if the OCTET STRING value had a primitive encoding,
              <c>false</c> and does not advance the reader if it had a constructed encoding.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyOctetStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Span{System.Byte},System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadObjectIdentifierAsString">
            <summary>
              Reads the next value as an OBJECT IDENTIFIER with tag UNIVERSAL 6, returning
              the value in a dotted decimal format string.
            </summary>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadObjectIdentifierAsString(System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Reads the next value as an OBJECT IDENTIFIER with a specified tag, returning
              the value in a dotted decimal format string.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadObjectIdentifier">
            <summary>
              Reads the next value as an OBJECT IDENTIFIER with tag UNIVERSAL 6, returning
              the value as an <see cref="T:System.Security.Cryptography.Oid"/>.
            </summary>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadObjectIdentifier(System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Reads the next value as an OBJECT IDENTIFIER with a specified tag, returning
              the value as an <see cref="T:System.Security.Cryptography.Oid"/>.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadSequence">
            <summary>
              Reads the next value as a SEQUENCE or SEQUENCE-OF with tag UNIVERSAL 16
              and returns the result as an <see cref="T:System.Security.Cryptography.Asn1.AsnReader"/> positioned at the first
              value in the sequence (or with <see cref="P:System.Security.Cryptography.Asn1.AsnReader.HasData"/> == <c>false</c>).
            </summary>
            <returns>
              an <see cref="T:System.Security.Cryptography.Asn1.AsnReader"/> positioned at the first
              value in the sequence (or with <see cref="P:System.Security.Cryptography.Asn1.AsnReader.HasData"/> == <c>false</c>).
            </returns>
            <remarks>
              the nested content is not evaluated by this method, and may contain data
              which is not valid under the current encoding rules.
            </remarks>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <see cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadSequence(System.Security.Cryptography.Asn1.Asn1Tag)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadSequence(System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Reads the next value as a SEQUENCE or SEQUENCE-OF with the specified tag
              and returns the result as an <see cref="T:System.Security.Cryptography.Asn1.AsnReader"/> positioned at the first
              value in the sequence (or with <see cref="P:System.Security.Cryptography.Asn1.AsnReader.HasData"/> == <c>false</c>).
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <returns>
              an <see cref="T:System.Security.Cryptography.Asn1.AsnReader"/> positioned at the first
              value in the sequence (or with <see cref="P:System.Security.Cryptography.Asn1.AsnReader.HasData"/> == <c>false</c>).
            </returns>
            <remarks>
              the nested content is not evaluated by this method, and may contain data
              which is not valid under the current encoding rules.
            </remarks>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadSetOf(System.Boolean)">
            <summary>
              Reads the next value as a SET-OF with the specified tag
              and returns the result as an <see cref="T:System.Security.Cryptography.Asn1.AsnReader"/> positioned at the first
              value in the set-of (or with <see cref="P:System.Security.Cryptography.Asn1.AsnReader.HasData"/> == <c>false</c>).
            </summary>
            <param name="skipSortOrderValidation">
              <c>true</c> to always accept the data in the order it is presented,
              <c>false</c> to verify that the data is sorted correctly when the
              encoding rules say sorting was required (CER and DER).
            </param>
            <returns>
              an <see cref="T:System.Security.Cryptography.Asn1.AsnReader"/> positioned at the first
              value in the set-of (or with <see cref="P:System.Security.Cryptography.Asn1.AsnReader.HasData"/> == <c>false</c>).
            </returns>
            <remarks>
              the nested content is not evaluated by this method (aside from sort order, when
              required), and may contain data which is not valid under the current encoding rules.
            </remarks>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadSetOf(System.Security.Cryptography.Asn1.Asn1Tag,System.Boolean)">
            <summary>
              Reads the next value as a SET-OF with the specified tag
              and returns the result as an <see cref="T:System.Security.Cryptography.Asn1.AsnReader"/> positioned at the first
              value in the set-of (or with <see cref="P:System.Security.Cryptography.Asn1.AsnReader.HasData"/> == <c>false</c>).
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="skipSortOrderValidation">
              <c>true</c> to always accept the data in the order it is presented,
              <c>false</c> to verify that the data is sorted correctly when the
              encoding rules say sorting was required (CER and DER).
            </param>
            <returns>
              an <see cref="T:System.Security.Cryptography.Asn1.AsnReader"/> positioned at the first
              value in the set-of (or with <see cref="P:System.Security.Cryptography.Asn1.AsnReader.HasData"/> == <c>false</c>).
            </returns>
            <remarks>
              the nested content is not evaluated by this method (aside from sort order, when
              required), and may contain data which is not valid under the current encoding rules.
            </remarks>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveCharacterStringBytes(System.Security.Cryptography.Asn1.UniversalTagNumber,System.ReadOnlyMemory{System.Byte}@)">
            <summary>
              Reads the next value as character string with a UNIVERSAL tag appropriate to the specified
              encoding type, returning the contents as an unprocessed <see cref="T:System.ReadOnlyMemory`1"/>
              over the original data.
            </summary>
            <param name="encodingType">
              A <see cref="T:System.Security.Cryptography.Asn1.UniversalTagNumber"/> corresponding to the value type to process.
            </param>
            <param name="contents">
              On success, receives a <see cref="T:System.ReadOnlyMemory`1"/> over the original data
              corresponding to the contents of the character string.
            </param>
            <returns>
              <c>true</c> and advances the reader if the value had a primitive encoding,
              <c>false</c> and does not advance the reader if it had a constructed encoding.
            </returns>
            <remarks>
              This method does not determine if the string used only characters defined by the encoding.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="encodingType"/> is not a known character string type.
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyCharacterStringBytes(System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Byte},System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveCharacterStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.ReadOnlyMemory{System.Byte}@)">
            <summary>
              Reads the next value as a character with a specified tag, returning the contents
              as an unprocessed <see cref="T:System.ReadOnlyMemory`1"/> over the original data.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="encodingType">
              A <see cref="T:System.Security.Cryptography.Asn1.UniversalTagNumber"/> corresponding to the value type to process.
            </param>
            <param name="contents">
              On success, receives a <see cref="T:System.ReadOnlyMemory`1"/> over the original data
              corresponding to the value of the OCTET STRING.
            </param>
            <returns>
              <c>true</c> and advances the reader if the OCTET STRING value had a primitive encoding,
              <c>false</c> and does not advance the reader if it had a constructed encoding.
            </returns>
            <remarks>
              This method does not determine if the string used only characters defined by the encoding.
            </remarks>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not the same as
              <paramref name="encodingType"/>.
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyCharacterStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Byte},System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyCharacterStringBytes(System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Byte},System.Int32@)">
            <summary>
              Reads the next value as character string with a UNIVERSAL tag appropriate to the specified
              encoding type, copying the value into a provided destination buffer.
            </summary>
            <param name="encodingType">
              A <see cref="T:System.Security.Cryptography.Asn1.UniversalTagNumber"/> corresponding to the value type to process.
            </param>
            <param name="destination">The buffer in which to write.</param>
            <param name="bytesWritten">
              On success, receives the number of bytes written to <paramref name="destination"/>.
            </param>
            <returns>
              <c>true</c> and advances the reader if <paramref name="destination"/> had sufficient
              length to receive the value, otherwise
              <c>false</c> and the reader does not advance.
            </returns>
            <remarks>
              This method does not determine if the string used only characters defined by the encoding.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="encodingType"/> is not a known character string type.
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveCharacterStringBytes(System.Security.Cryptography.Asn1.UniversalTagNumber,System.ReadOnlyMemory{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadCharacterString(System.Security.Cryptography.Asn1.UniversalTagNumber)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyCharacterString(System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Char},System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyCharacterStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Byte},System.Int32@)">
            <summary>
              Reads the next value as character string with the specified tag and
              encoding type, copying the value into a provided destination buffer.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="encodingType">
              A <see cref="T:System.Security.Cryptography.Asn1.UniversalTagNumber"/> corresponding to the value type to process.
            </param>
            <param name="destination">The buffer in which to write.</param>
            <param name="bytesWritten">
              On success, receives the number of bytes written to <paramref name="destination"/>.
            </param>
            <returns>
              <c>true</c> and advances the reader if <paramref name="destination"/> had sufficient
              length to receive the value, otherwise
              <c>false</c> and the reader does not advance.
            </returns>
            <remarks>
              This method does not determine if the string used only characters defined by the encoding.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="encodingType"/> is not a known character string type.
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not the same as
              <paramref name="encodingType"/>.
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveCharacterStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.ReadOnlyMemory{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadCharacterString(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyCharacterString(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Char},System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyCharacterStringBytes(System.Security.Cryptography.Asn1.UniversalTagNumber,System.ArraySegment{System.Byte},System.Int32@)">
            <summary>
              Reads the next value as character string with a UNIVERSAL tag appropriate to the specified
              encoding type, copying the value into a provided destination buffer.
            </summary>
            <param name="encodingType">
              A <see cref="T:System.Security.Cryptography.Asn1.UniversalTagNumber"/> corresponding to the value type to process.
            </param>
            <param name="destination">The buffer in which to write.</param>
            <param name="bytesWritten">
              On success, receives the number of bytes written to <paramref name="destination"/>.
            </param>
            <returns>
              <c>true</c> and advances the reader if <paramref name="destination"/> had sufficient
              length to receive the value, otherwise
              <c>false</c> and the reader does not advance.
            </returns>
            <remarks>
              This method does not determine if the string used only characters defined by the encoding.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="encodingType"/> is not a known character string type.
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveCharacterStringBytes(System.Security.Cryptography.Asn1.UniversalTagNumber,System.ReadOnlyMemory{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadCharacterString(System.Security.Cryptography.Asn1.UniversalTagNumber)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyCharacterString(System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Char},System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyCharacterStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.ArraySegment{System.Byte},System.Int32@)">
            <summary>
              Reads the next value as character string with the specified tag and
              encoding type, copying the value into a provided destination buffer.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="encodingType">
              A <see cref="T:System.Security.Cryptography.Asn1.UniversalTagNumber"/> corresponding to the value type to process.
            </param>
            <param name="destination">The buffer in which to write.</param>
            <param name="bytesWritten">
              On success, receives the number of bytes written to <paramref name="destination"/>.
            </param>
            <returns>
              <c>true</c> and advances the reader if <paramref name="destination"/> had sufficient
              length to receive the value, otherwise
              <c>false</c> and the reader does not advance.
            </returns>
            <remarks>
              This method does not determine if the string used only characters defined by the encoding.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="encodingType"/> is not a known character string type.
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not the same as
              <paramref name="encodingType"/>.
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveCharacterStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.ReadOnlyMemory{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadCharacterString(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyCharacterString(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Char},System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyCharacterString(System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Char},System.Int32@)">
            <summary>
              Reads the next value as character string with a UNIVERSAL tag appropriate to the specified
              encoding type, copying the decoded value into a provided destination buffer.
            </summary>
            <param name="encodingType">
              A <see cref="T:System.Security.Cryptography.Asn1.UniversalTagNumber"/> corresponding to the value type to process.
            </param>
            <param name="destination">The buffer in which to write.</param>
            <param name="charsWritten">
              On success, receives the number of chars written to <paramref name="destination"/>.
            </param>
            <returns>
              <c>true</c> and advances the reader if <paramref name="destination"/> had sufficient
              length to receive the value, otherwise
              <c>false</c> and the reader does not advance.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="encodingType"/> is not a known character string type.
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules --OR--
              the string did not successfully decode
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveCharacterStringBytes(System.Security.Cryptography.Asn1.UniversalTagNumber,System.ReadOnlyMemory{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadCharacterString(System.Security.Cryptography.Asn1.UniversalTagNumber)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyCharacterStringBytes(System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Byte},System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyCharacterString(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Char},System.Int32@)">
            <summary>
              Reads the next value as character string with the specified tag and
              encoding type, copying the decoded value into a provided destination buffer.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="encodingType">
              A <see cref="T:System.Security.Cryptography.Asn1.UniversalTagNumber"/> corresponding to the value type to process.
            </param>
            <param name="destination">The buffer in which to write.</param>
            <param name="charsWritten">
              On success, receives the number of chars written to <paramref name="destination"/>.
            </param>
            <returns>
              <c>true</c> and advances the reader if <paramref name="destination"/> had sufficient
              length to receive the value, otherwise
              <c>false</c> and the reader does not advance.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="encodingType"/> is not a known character string type.
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules --OR--
              the string did not successfully decode
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not the same as
              <paramref name="encodingType"/>.
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveCharacterStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.ReadOnlyMemory{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyCharacterStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Byte},System.Int32@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadCharacterString(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyCharacterString(System.Security.Cryptography.Asn1.UniversalTagNumber,System.ArraySegment{System.Char},System.Int32@)">
            <summary>
              Reads the next value as character string with a UNIVERSAL tag appropriate to the specified
              encoding type, copying the decoded value into a provided destination buffer.
            </summary>
            <param name="encodingType">
              A <see cref="T:System.Security.Cryptography.Asn1.UniversalTagNumber"/> corresponding to the value type to process.
            </param>
            <param name="destination">The buffer in which to write.</param>
            <param name="charsWritten">
              On success, receives the number of chars written to <paramref name="destination"/>.
            </param>
            <returns>
              <c>true</c> and advances the reader if <paramref name="destination"/> had sufficient
              length to receive the value, otherwise
              <c>false</c> and the reader does not advance.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="encodingType"/> is not a known character string type.
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules --OR--
              the string did not successfully decode
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveCharacterStringBytes(System.Security.Cryptography.Asn1.UniversalTagNumber,System.ReadOnlyMemory{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadCharacterString(System.Security.Cryptography.Asn1.UniversalTagNumber)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyCharacterStringBytes(System.Security.Cryptography.Asn1.UniversalTagNumber,System.ArraySegment{System.Byte},System.Int32@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyCharacterString(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.ArraySegment{System.Char},System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyCharacterString(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.ArraySegment{System.Char},System.Int32@)">
            <summary>
              Reads the next value as character string with the specified tag and
              encoding type, copying the decoded value into a provided destination buffer.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="encodingType">
              A <see cref="T:System.Security.Cryptography.Asn1.UniversalTagNumber"/> corresponding to the value type to process.
            </param>
            <param name="destination">The buffer in which to write.</param>
            <param name="charsWritten">
              On success, receives the number of chars written to <paramref name="destination"/>.
            </param>
            <returns>
              <c>true</c> and advances the reader if <paramref name="destination"/> had sufficient
              length to receive the value, otherwise
              <c>false</c> and the reader does not advance.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="encodingType"/> is not a known character string type.
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules --OR--
              the string did not successfully decode
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not the same as
              <paramref name="encodingType"/>.
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveCharacterStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.ReadOnlyMemory{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyCharacterStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.ArraySegment{System.Byte},System.Int32@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadCharacterString(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadCharacterString(System.Security.Cryptography.Asn1.UniversalTagNumber)">
            <summary>
              Reads the next value as character string with a UNIVERSAL tag appropriate to the specified
              encoding type, returning the decoded value as a <see cref="T:System.String"/>.
            </summary>
            <param name="encodingType">
              A <see cref="T:System.Security.Cryptography.Asn1.UniversalTagNumber"/> corresponding to the value type to process.
            </param>
            <returns>
              the decoded value as a <see cref="T:System.String"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="encodingType"/> is not a known character string type.
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules --OR--
              the string did not successfully decode
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveCharacterStringBytes(System.Security.Cryptography.Asn1.UniversalTagNumber,System.ReadOnlyMemory{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyCharacterStringBytes(System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Byte},System.Int32@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyCharacterString(System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Char},System.Int32@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadCharacterString(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadCharacterString(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber)">
            <summary>
              Reads the next value as character string with the specified tag and
              encoding type, returning the decoded value as a <see cref="T:System.String"/>.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="encodingType">
              A <see cref="T:System.Security.Cryptography.Asn1.UniversalTagNumber"/> corresponding to the value type to process.
            </param>
            <returns>
              the decoded value as a <see cref="T:System.String"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="encodingType"/> is not a known character string type.
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules --OR--
              the string did not successfully decode
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not the same as
              <paramref name="encodingType"/>.
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveCharacterStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.ReadOnlyMemory{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyCharacterStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Byte},System.Int32@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyCharacterString(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Char},System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadUtcTime(System.Int32)">
            <summary>
              Reads the next value as a UTCTime with tag UNIVERSAL 23.
            </summary>
            <param name="twoDigitYearMax">
              The largest year to represent with this value.
              The default value, 2049, represents the 1950-2049 range for X.509 certificates.
            </param>
            <returns>
              a DateTimeOffset representing the value encoded in the UTCTime.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <seealso cref="P:System.Globalization.Calendar.TwoDigitYearMax"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadUtcTime(System.Security.Cryptography.Asn1.Asn1Tag,System.Int32)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadUtcTime(System.Security.Cryptography.Asn1.Asn1Tag,System.Int32)">
            <summary>
              Reads the next value as a UTCTime with a specified tag.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="twoDigitYearMax">
              The largest year to represent with this value.
              The default value, 2049, represents the 1950-2049 range for X.509 certificates.
            </param>
            <returns>
              a DateTimeOffset representing the value encoded in the UTCTime.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <seealso cref="P:System.Globalization.Calendar.TwoDigitYearMax"/>
        </member>
        <member name="T:System.Security.Cryptography.Asn1.AsnWriter">
            <summary>
              A writer for BER-, CER-, and DER-encoded ASN.1 data.
            </summary>
        </member>
        <member name="P:System.Security.Cryptography.Asn1.AsnWriter.RuleSet">
            <summary>
              The <see cref="T:System.Security.Cryptography.Asn1.AsnEncodingRules"/> in use by this writer.
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.#ctor(System.Security.Cryptography.Asn1.AsnEncodingRules)">
            <summary>
              Create a new <see cref="T:System.Security.Cryptography.Asn1.AsnWriter"/> with a given set of encoding rules.
            </summary>
            <param name="ruleSet">The encoding constraints for the writer.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="ruleSet"/> is not defined.
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.Dispose">
            <summary>
              Release the resources held by this writer.
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.Reset">
            <summary>
              Reset the writer to have no data, without releasing resources.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.GetEncodedLength">
            <summary>
              Gets the number of bytes that would be written by <see cref="M:System.Security.Cryptography.Asn1.AsnWriter.TryEncode(System.Span{System.Byte},System.Int32@)"/>.
            </summary>
            <returns>
              The number of bytes that would be written by <see cref="M:System.Security.Cryptography.Asn1.AsnWriter.TryEncode(System.Span{System.Byte},System.Int32@)"/>, or -1
              if a <see cref="M:System.Security.Cryptography.Asn1.AsnWriter.PushSequence"/> or <see cref="M:System.Security.Cryptography.Asn1.AsnWriter.PushSetOf"/> has not been completed.
            </returns>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.TryEncode(System.Span{System.Byte},System.Int32@)">
            <summary>
              Write the encoded representation of the data to <paramref name="destination"/>.
            </summary>
            <param name="destination">The buffer in which to write.</param>
            <param name="bytesWritten">
              On success, receives the number of bytes written to <paramref name="destination"/>.
            </param>
            <returns>
              <c>true</c> if the encode succeeded,
              <c>false</c> if <paramref name="destination"/> is too small.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              A <see cref="M:System.Security.Cryptography.Asn1.AsnWriter.PushSequence"/> or <see cref="M:System.Security.Cryptography.Asn1.AsnWriter.PushSetOf"/> has not been closed via
              <see cref="M:System.Security.Cryptography.Asn1.AsnWriter.PopSequence"/> or <see cref="M:System.Security.Cryptography.Asn1.AsnWriter.PopSetOf"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.Encode">
            <summary>
              Return a new array containing the encoded value.
            </summary>
            <returns>A precisely-sized array containing the encoded value.</returns>
            <exception cref="T:System.InvalidOperationException">
              A <see cref="M:System.Security.Cryptography.Asn1.AsnWriter.PushSequence"/> or <see cref="M:System.Security.Cryptography.Asn1.AsnWriter.PushSetOf"/> has not been closed via
              <see cref="M:System.Security.Cryptography.Asn1.AsnWriter.PopSequence"/> or <see cref="M:System.Security.Cryptography.Asn1.AsnWriter.PopSetOf"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.ValueEquals(System.ReadOnlySpan{System.Byte})">
            <summary>
              Determines if <see cref="M:System.Security.Cryptography.Asn1.AsnWriter.Encode"/> would produce an output identical to
              <paramref name="other"/>.
            </summary>
            <returns>
              <see langword="true"/> if the pending encoded data is identical to <paramref name="other"/>,
              <see langword="false"/> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              A <see cref="M:System.Security.Cryptography.Asn1.AsnWriter.PushSequence"/> or <see cref="M:System.Security.Cryptography.Asn1.AsnWriter.PushSetOf"/> has not been closed via
              <see cref="M:System.Security.Cryptography.Asn1.AsnWriter.PopSequence"/> or <see cref="M:System.Security.Cryptography.Asn1.AsnWriter.PopSetOf"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteEncodedValue(System.ReadOnlySpan{System.Byte})">
            <summary>
              Write a single value which has already been encoded.
            </summary>
            <param name="preEncodedValue">The value to write.</param>
            <remarks>
              This method only checks that the tag and length are encoded according to the current ruleset,
              and that the end of the value is the end of the input. The contents are not evaluated for
              semantic meaning.
            </remarks>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              <paramref name="preEncodedValue"/> could not be read under the current encoding rules --OR--
              <paramref name="preEncodedValue"/> has data beyond the end of the first value
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteBitString(System.ReadOnlySpan{System.Byte},System.Int32)">
            <summary>
              Write a Bit String value with a tag UNIVERSAL 3.
            </summary>
            <param name="bitString">The value to write.</param>
            <param name="unusedBitCount">
              The number of trailing bits which are not semantic.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="unusedBitCount"/> is not in the range [0,7]
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              <paramref name="bitString"/> has length 0 and <paramref name="unusedBitCount"/> is not 0 --OR--
              <paramref name="bitString"/> is not empty and any of the bits identified by
              <paramref name="unusedBitCount"/> is set
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteBitString(System.Security.Cryptography.Asn1.Asn1Tag,System.ReadOnlySpan{System.Byte},System.Int32)">
            <summary>
              Write a Bit String value with a specified tag.
            </summary>
            <param name="tag">The tag to write.</param>
            <param name="bitString">The value to write.</param>
            <param name="unusedBitCount">
              The number of trailing bits which are not semantic.
            </param>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="unusedBitCount"/> is not in the range [0,7]
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              <paramref name="bitString"/> has length 0 and <paramref name="unusedBitCount"/> is not 0 --OR--
              <paramref name="bitString"/> is not empty and any of the bits identified by
              <paramref name="unusedBitCount"/> is set
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteBitString``1(System.Int32,``0,System.Buffers.SpanAction{System.Byte,``0},System.Int32)">
            <summary>
              Write a Bit String value via a callback, with a tag UNIVERSAL 3.
            </summary>
            <param name="byteLength">The total number of bytes to write.</param>
            <param name="state">A state object to pass to <paramref name="action"/>.</param>
            <param name="action">A callback to invoke for populating the Bit String.</param>
            <param name="unusedBitCount">
              The number of trailing bits which are not semantic.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="byteLength"/> is negative --OR--
              <paramref name="unusedBitCount"/> is not in the range [0,7]
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              <paramref name="byteLength"/> is 0 and <paramref name="unusedBitCount"/> is not 0 --OR--
              <paramref name="byteLength"/> is not 0 and any of the bits identified by
              <paramref name="unusedBitCount"/> is set
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteBitString``1(System.Security.Cryptography.Asn1.Asn1Tag,System.Int32,``0,System.Buffers.SpanAction{System.Byte,``0},System.Int32)">
            <summary>
              Write a Bit String value via a callback, with a specified tag.
            </summary>
            <param name="tag">The tag to write.</param>
            <param name="byteLength">The total number of bytes to write.</param>
            <param name="state">A state object to pass to <paramref name="action"/>.</param>
            <param name="action">A callback to invoke for populating the Bit String.</param>
            <param name="unusedBitCount">
              The number of trailing bits which are not semantic.
            </param>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="byteLength"/> is negative --OR--
              <paramref name="unusedBitCount"/> is not in the range [0,7]
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              <paramref name="byteLength"/> is 0 and <paramref name="unusedBitCount"/> is not 0 --OR--
              <paramref name="byteLength"/> is not 0 and any of the bits identified by
              <paramref name="unusedBitCount"/> is set
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteBoolean(System.Boolean)">
            <summary>
              Write a Boolean value with tag UNIVERSAL 1.
            </summary>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteBoolean(System.Security.Cryptography.Asn1.Asn1Tag,System.Boolean)">
            <summary>
              Write a Boolean value with a specified tag.
            </summary>
            <param name="tag">The tag to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteEnumeratedValue(System.Object)">
            <summary>
              Write a non-[<see cref="T:System.FlagsAttribute"/>] enum value as an Enumerated with
              tag UNIVERSAL 10.
            </summary>
            <param name="enumValue">The boxed enumeration value to write</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="enumValue"/> is <c>null</c>
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="enumValue"/> is not a boxed enum value --OR--
              the unboxed type of <paramref name="enumValue"/> is declared [<see cref="T:System.FlagsAttribute"/>]
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.WriteEnumeratedValue(System.Security.Cryptography.Asn1.Asn1Tag,System.Object)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.WriteEnumeratedValue``1(``0)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteEnumeratedValue``1(``0)">
            <summary>
              Write a non-[<see cref="T:System.FlagsAttribute"/>] enum value as an Enumerated with
              tag UNIVERSAL 10.
            </summary>
            <param name="enumValue">The boxed enumeration value to write</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="enumValue"/> is <c>null</c>
            </exception>
            <exception cref="T:System.ArgumentException">
              <typeparamref name="TEnum"/> is not a boxed enum value --OR--
              <typeparamref name="TEnum"/> is declared [<see cref="T:System.FlagsAttribute"/>]
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.WriteEnumeratedValue(System.Security.Cryptography.Asn1.Asn1Tag,System.Object)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.WriteEnumeratedValue``1(``0)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteEnumeratedValue(System.Security.Cryptography.Asn1.Asn1Tag,System.Object)">
            <summary>
              Write a non-[<see cref="T:System.FlagsAttribute"/>] enum value as an Enumerated with
              tag UNIVERSAL 10.
            </summary>
            <param name="tag">The tag to write.</param>
            <param name="enumValue">The boxed enumeration value to write.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="enumValue"/> is <c>null</c>
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method --OR--
              <paramref name="enumValue"/> is not a boxed enum value --OR--
              the unboxed type of <paramref name="enumValue"/> is declared [<see cref="T:System.FlagsAttribute"/>]
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.WriteEnumeratedValue(System.Security.Cryptography.Asn1.Asn1Tag,System.Object)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.WriteEnumeratedValue``1(``0)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteEnumeratedValue``1(System.Security.Cryptography.Asn1.Asn1Tag,``0)">
            <summary>
              Write a non-[<see cref="T:System.FlagsAttribute"/>] enum value as an Enumerated with
              tag UNIVERSAL 10.
            </summary>
            <param name="tag">The tag to write.</param>
            <param name="enumValue">The boxed enumeration value to write.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="enumValue"/> is <c>null</c>
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method --OR--
              <typeparamref name="TEnum"/> is not an enum --OR--
              <typeparamref name="TEnum"/> is declared [<see cref="T:System.FlagsAttribute"/>]
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.WriteEnumeratedValue(System.Security.Cryptography.Asn1.Asn1Tag,System.Object)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.WriteEnumeratedValue``1(``0)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteGeneralizedTime(System.DateTimeOffset,System.Boolean)">
            <summary>
              Write the provided <see cref="T:System.DateTimeOffset"/> as a GeneralizedTime with tag
              UNIVERSAL 24, optionally excluding the fractional seconds.
            </summary>
            <param name="value">The value to write.</param>
            <param name="omitFractionalSeconds">
              <c>true</c> to treat the fractional seconds in <paramref name="value"/> as 0 even if
              a non-zero value is present.
            </param>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.WriteGeneralizedTime(System.Security.Cryptography.Asn1.Asn1Tag,System.DateTimeOffset,System.Boolean)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteGeneralizedTime(System.Security.Cryptography.Asn1.Asn1Tag,System.DateTimeOffset,System.Boolean)">
            <summary>
              Write the provided <see cref="T:System.DateTimeOffset"/> as a GeneralizedTime with a specified
              UNIVERSAL 24, optionally excluding the fractional seconds.
            </summary>
            <param name="tag">The tagto write.</param>
            <param name="value">The value to write.</param>
            <param name="omitFractionalSeconds">
              <c>true</c> to treat the fractional seconds in <paramref name="value"/> as 0 even if
              a non-zero value is present.
            </param>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.WriteGeneralizedTime(System.Security.Cryptography.Asn1.Asn1Tag,System.DateTimeOffset,System.Boolean)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteInteger(System.Int64)">
            <summary>
              Write an Integer value with tag UNIVERSAL 2.
            </summary>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteInteger(System.UInt64)">
            <summary>
              Write an Integer value with tag UNIVERSAL 2.
            </summary>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteInteger(System.Numerics.BigInteger)">
            <summary>
              Write an Integer value with tag UNIVERSAL 2.
            </summary>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteInteger(System.ReadOnlySpan{System.Byte})">
            <summary>
              Write an Integer value with a specified tag.
            </summary>
            <param name="value">The integer value to write, in signed big-endian byte order.</param>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the 9 most sigificant bits are all set --OR--
              the 9 most sigificant bits are all unset
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteInteger(System.Security.Cryptography.Asn1.Asn1Tag,System.Int64)">
            <summary>
              Write an Integer value with a specified tag.
            </summary>
            <param name="tag">The tag to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteInteger(System.Security.Cryptography.Asn1.Asn1Tag,System.UInt64)">
            <summary>
              Write an Integer value with a specified tag.
            </summary>
            <param name="tag">The tag to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteInteger(System.Security.Cryptography.Asn1.Asn1Tag,System.Numerics.BigInteger)">
            <summary>
              Write an Integer value with a specified tag.
            </summary>
            <param name="tag">The tag to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteInteger(System.Security.Cryptography.Asn1.Asn1Tag,System.ReadOnlySpan{System.Byte})">
            <summary>
              Write an Integer value with a specified tag.
            </summary>
            <param name="tag">The tag to write.</param>
            <param name="value">The integer value to write, in signed big-endian byte order.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the 9 most sigificant bits are all set --OR--
              the 9 most sigificant bits are all unset
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteIntegerUnsigned(System.ReadOnlySpan{System.Byte})">
            <summary>
              Write an Integer value with tag UNIVERSAL 2.
            </summary>
            <param name="value">The integer value to write, in unsigned big-endian byte order.</param>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the 9 most sigificant bits are all unset
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteIntegerUnsigned(System.Security.Cryptography.Asn1.Asn1Tag,System.ReadOnlySpan{System.Byte})">
            <summary>
              Write an Integer value with a specified tag.
            </summary>
            <param name="tag">The tag to write.</param>
            <param name="value">The integer value to write, in unsigned big-endian byte order.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the 9 most sigificant bits are all unset
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteNamedBitList(System.Object)">
            <summary>
              Write a [<see cref="T:System.FlagsAttribute"/>] enum value as a NamedBitList with
              tag UNIVERSAL 3.
            </summary>
            <param name="enumValue">The boxed enumeration value to write</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="enumValue"/> is <c>null</c>
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="enumValue"/> is not a boxed enum value --OR--
              the unboxed type of <paramref name="enumValue"/> is not declared [<see cref="T:System.FlagsAttribute"/>]
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.WriteNamedBitList(System.Security.Cryptography.Asn1.Asn1Tag,System.Object)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.WriteNamedBitList``1(``0)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteNamedBitList``1(``0)">
            <summary>
              Write a [<see cref="T:System.FlagsAttribute"/>] enum value as a NamedBitList with
              tag UNIVERSAL 3.
            </summary>
            <param name="enumValue">The enumeration value to write</param>
            <exception cref="T:System.ArgumentException">
              <typeparamref name="TEnum"/> is not an enum value --OR--
              <typeparamref name="TEnum"/> is not declared [<see cref="T:System.FlagsAttribute"/>]
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.WriteNamedBitList``1(System.Security.Cryptography.Asn1.Asn1Tag,``0)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteNamedBitList(System.Security.Cryptography.Asn1.Asn1Tag,System.Object)">
            <summary>
              Write a [<see cref="T:System.FlagsAttribute"/>] enum value as a NamedBitList with
              a specified tag.
            </summary>
            <param name="tag">The tag to write.</param>
            <param name="enumValue">The boxed enumeration value to write</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method --OR--
              <paramref name="enumValue"/> is not a boxed enum value --OR--
              the unboxed type of <paramref name="enumValue"/> is not declared [<see cref="T:System.FlagsAttribute"/>]
            </exception>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="enumValue"/> is <c>null</c>
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteNamedBitList``1(System.Security.Cryptography.Asn1.Asn1Tag,``0)">
            <summary>
              Write a [<see cref="T:System.FlagsAttribute"/>] enum value as a NamedBitList with
              a specified tag.
            </summary>
            <param name="tag">The tag to write.</param>
            <param name="enumValue">The enumeration value to write</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method --OR--
              <typeparamref name="TEnum"/> is not an enum value --OR--
              <typeparamref name="TEnum"/> is not declared [<see cref="T:System.FlagsAttribute"/>]
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteNull">
            <summary>
              Write NULL with tag UNIVERSAL 5.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteNull(System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Write NULL with a specified tag.
            </summary>
            <param name="tag">The tag to write.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteOctetString(System.ReadOnlySpan{System.Byte})">
            <summary>
              Write an Octet String with tag UNIVERSAL 4.
            </summary>
            <param name="octetString">The value to write.</param>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.WriteOctetString(System.Security.Cryptography.Asn1.Asn1Tag,System.ReadOnlySpan{System.Byte})"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteOctetString(System.Security.Cryptography.Asn1.Asn1Tag,System.ReadOnlySpan{System.Byte})">
            <summary>
              Write an Octet String value with a specified tag.
            </summary>
            <param name="tag">The tag to write.</param>
            <param name="octetString">The value to write.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteObjectIdentifier(System.Security.Cryptography.Oid)">
            <summary>
              Write an Object Identifier with a specified tag.
            </summary>
            <param name="oid">The object identifier to write.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="oid"/> is <c>null</c>
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              <paramref name="oid"/>.<see cref="P:System.Security.Cryptography.Oid.Value"/> is not a valid dotted decimal
              object identifier
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteObjectIdentifier(System.String)">
            <summary>
              Write an Object Identifier with a specified tag.
            </summary>
            <param name="oidValue">The object identifier to write.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="oidValue"/> is <c>null</c>
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              <paramref name="oidValue"/> is not a valid dotted decimal
              object identifier
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteObjectIdentifier(System.ReadOnlySpan{System.Char})">
            <summary>
              Write an Object Identifier with tag UNIVERSAL 6.
            </summary>
            <param name="oidValue">The object identifier to write.</param>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              <paramref name="oidValue"/> is not a valid dotted decimal
              object identifier
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteObjectIdentifier(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Oid)">
            <summary>
              Write an Object Identifier with a specified tag.
            </summary>
            <param name="tag">The tag to write.</param>
            <param name="oid">The object identifier to write.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="oid"/> is <c>null</c>
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              <paramref name="oid"/>.<see cref="P:System.Security.Cryptography.Oid.Value"/> is not a valid dotted decimal
              object identifier
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteObjectIdentifier(System.Security.Cryptography.Asn1.Asn1Tag,System.String)">
            <summary>
              Write an Object Identifier with a specified tag.
            </summary>
            <param name="tag">The tag to write.</param>
            <param name="oidValue">The object identifier to write.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="oidValue"/> is <c>null</c>
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              <paramref name="oidValue"/> is not a valid dotted decimal
              object identifier
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteObjectIdentifier(System.Security.Cryptography.Asn1.Asn1Tag,System.ReadOnlySpan{System.Char})">
            <summary>
              Write an Object Identifier with a specified tag.
            </summary>
            <param name="tag">The tag to write.</param>
            <param name="oidValue">The object identifier to write.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              <paramref name="oidValue"/> is not a valid dotted decimal
              object identifier
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.PushSequence">
            <summary>
              Begin writing a Sequence with tag UNIVERSAL 16.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.PushSequence(System.Security.Cryptography.Asn1.Asn1Tag)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.PopSequence"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.PushSequence(System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Begin writing a Sequence with a specified tag.
            </summary>
            <param name="tag">The tag to write.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.PopSequence(System.Security.Cryptography.Asn1.Asn1Tag)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.PopSequence">
            <summary>
              Indicate that the open Sequence with tag UNIVERSAL 16 is closed,
              returning the writer to the parent context.
            </summary>
            <exception cref="T:System.InvalidOperationException">
              the writer is not currently positioned within a Sequence with tag UNIVERSAL 16
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.PopSequence(System.Security.Cryptography.Asn1.Asn1Tag)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.PushSequence"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.PopSequence(System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Indicate that the open Sequence with the specified tag is closed,
              returning the writer to the parent context.
            </summary>
            <param name="tag">The tag to write.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <exception cref="T:System.InvalidOperationException">
              the writer is not currently positioned within a Sequence with the specified tag
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.PopSequence(System.Security.Cryptography.Asn1.Asn1Tag)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.PushSequence"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.PushSetOf">
            <summary>
              Begin writing a Set-Of with a tag UNIVERSAL 17.
            </summary>
            <remarks>
              In <see cref="F:System.Security.Cryptography.Asn1.AsnEncodingRules.CER"/> and <see cref="F:System.Security.Cryptography.Asn1.AsnEncodingRules.DER"/> modes
              the writer will sort the Set-Of elements when the tag is closed.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.PushSetOf(System.Security.Cryptography.Asn1.Asn1Tag)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.PopSetOf"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.PushSetOf(System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Begin writing a Set-Of with a specified tag.
            </summary>
            <param name="tag">The tag to write.</param>
            <remarks>
              In <see cref="F:System.Security.Cryptography.Asn1.AsnEncodingRules.CER"/> and <see cref="F:System.Security.Cryptography.Asn1.AsnEncodingRules.DER"/> modes
              the writer will sort the Set-Of elements when the tag is closed.
            </remarks>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.PopSetOf(System.Security.Cryptography.Asn1.Asn1Tag)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.PopSetOf">
            <summary>
              Indicate that the open Set-Of with the tag UNIVERSAL 17 is closed,
              returning the writer to the parent context.
            </summary>
            <remarks>
              In <see cref="F:System.Security.Cryptography.Asn1.AsnEncodingRules.CER"/> and <see cref="F:System.Security.Cryptography.Asn1.AsnEncodingRules.DER"/> modes
              the writer will sort the Set-Of elements when the tag is closed.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
              the writer is not currently positioned within a Sequence with tag UNIVERSAL 17
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.PopSetOf(System.Security.Cryptography.Asn1.Asn1Tag)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.PushSetOf"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.PopSetOf(System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Indicate that the open Set-Of with the specified tag is closed,
              returning the writer to the parent context.
            </summary>
            <param name="tag">The tag to write.</param>
            <remarks>
              In <see cref="F:System.Security.Cryptography.Asn1.AsnEncodingRules.CER"/> and <see cref="F:System.Security.Cryptography.Asn1.AsnEncodingRules.DER"/> modes
              the writer will sort the Set-Of elements when the tag is closed.
            </remarks>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <exception cref="T:System.InvalidOperationException">
              the writer is not currently positioned within a Set-Of with the specified tag
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.PushSetOf(System.Security.Cryptography.Asn1.Asn1Tag)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteCharacterString(System.Security.Cryptography.Asn1.UniversalTagNumber,System.String)">
            <summary>
              Write the provided string using the specified encoding type using the UNIVERSAL
              tag corresponding to the encoding type.
            </summary>
            <param name="encodingType">
              The <see cref="T:System.Security.Cryptography.Asn1.UniversalTagNumber"/> corresponding to the encoding to use.
            </param>
            <param name="str">The string to write.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="str"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="encodingType"/> is not a restricted character string encoding type --OR--
              <paramref name="encodingType"/> is a restricted character string encoding type that is not
              currently supported by this method
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.WriteCharacterString(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.String)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteCharacterString(System.Security.Cryptography.Asn1.UniversalTagNumber,System.ReadOnlySpan{System.Char})">
            <summary>
              Write the provided string using the specified encoding type using the UNIVERSAL
              tag corresponding to the encoding type.
            </summary>
            <param name="encodingType">
              The <see cref="T:System.Security.Cryptography.Asn1.UniversalTagNumber"/> corresponding to the encoding to use.
            </param>
            <param name="str">The string to write.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="encodingType"/> is not a restricted character string encoding type --OR--
              <paramref name="encodingType"/> is a restricted character string encoding type that is not
              currently supported by this method
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.WriteCharacterString(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.ReadOnlySpan{System.Char})"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteCharacterString(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.String)">
            <summary>
              Write the provided string using the specified encoding type using the specified
              tag corresponding to the encoding type.
            </summary>
            <param name="tag">The tag to write.</param>
            <param name="encodingType">
              The <see cref="T:System.Security.Cryptography.Asn1.UniversalTagNumber"/> corresponding to the encoding to use.
            </param>
            <param name="str">The string to write.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="str"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="encodingType"/> is not a restricted character string encoding type --OR--
              <paramref name="encodingType"/> is a restricted character string encoding type that is not
              currently supported by this method
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteCharacterString(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.ReadOnlySpan{System.Char})">
            <summary>
              Write the provided string using the specified encoding type using the specified
              tag corresponding to the encoding type.
            </summary>
            <param name="tag">The tag to write.</param>
            <param name="encodingType">
              The <see cref="T:System.Security.Cryptography.Asn1.UniversalTagNumber"/> corresponding to the encoding to use.
            </param>
            <param name="str">The string to write.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="encodingType"/> is not a restricted character string encoding type --OR--
              <paramref name="encodingType"/> is a restricted character string encoding type that is not
              currently supported by this method
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteUtcTime(System.DateTimeOffset)">
            <summary>
              Write the provided <see cref="T:System.DateTimeOffset"/> as a UTCTime with tag
              UNIVERSAL 23, and accepting the two-digit year as valid in context.
            </summary>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.WriteUtcTime(System.Security.Cryptography.Asn1.Asn1Tag,System.DateTimeOffset)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.WriteUtcTime(System.DateTimeOffset,System.Int32)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteUtcTime(System.Security.Cryptography.Asn1.Asn1Tag,System.DateTimeOffset)">
            <summary>
              Write the provided <see cref="T:System.DateTimeOffset"/> as a UTCTime with a specified tag,
              accepting the two-digit year as valid in context.
            </summary>
            <param name="tag">The tag to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.WriteUtcTime(System.Security.Cryptography.Asn1.Asn1Tag,System.DateTimeOffset,System.Int32)"/>
            <seealso cref="P:System.Globalization.Calendar.TwoDigitYearMax"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteUtcTime(System.DateTimeOffset,System.Int32)">
            <summary>
              Write the provided <see cref="T:System.DateTimeOffset"/> as a UTCTime with tag
              UNIVERSAL 23, provided the year is in the allowed range.
            </summary>
            <param name="value">The value to write.</param>
            <param name="twoDigitYearMax">
              The maximum valid year for <paramref name="value"/>, after conversion to UTC.
              For the X.509 Time.utcTime range of 1950-2049, pass <c>2049</c>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/>.<see cref="P:System.DateTimeOffset.Year"/> (after conversion to UTC)
              is not in the range
              (<paramref name="twoDigitYearMax"/> - 100, <paramref name="twoDigitYearMax"/>]
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.WriteUtcTime(System.Security.Cryptography.Asn1.Asn1Tag,System.DateTimeOffset,System.Int32)"/>
            <seealso cref="P:System.Globalization.Calendar.TwoDigitYearMax"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteUtcTime(System.Security.Cryptography.Asn1.Asn1Tag,System.DateTimeOffset,System.Int32)">
            <summary>
              Write the provided <see cref="T:System.DateTimeOffset"/> as a UTCTime with a specified tag,
              provided the year is in the allowed range.
            </summary>
            <param name="tag">The tag to write.</param>
            <param name="value">The value to write.</param>
            <param name="twoDigitYearMax">
              The maximum valid year for <paramref name="value"/>, after conversion to UTC.
              For the X.509 Time.utcTime range of 1950-2049, pass <c>2049</c>.
            </param>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/>.<see cref="P:System.DateTimeOffset.Year"/> (after conversion to UTC)
              is not in the range
              (<paramref name="twoDigitYearMax"/> - 100, <paramref name="twoDigitYearMax"/>]
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.WriteUtcTime(System.Security.Cryptography.Asn1.Asn1Tag,System.DateTimeOffset,System.Int32)"/>
            <seealso cref="P:System.Globalization.Calendar.TwoDigitYearMax"/>
        </member>
        <member name="T:System.Security.Cryptography.Asn1.TagClass">
            <summary>
              The tag class for a particular ASN.1 tag.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.TagClass.Universal">
            <summary>
              The Universal tag class
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.TagClass.Application">
            <summary>
              The Application tag class
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.TagClass.ContextSpecific">
            <summary>
              The Context-Specific tag class
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.TagClass.Private">
            <summary>
              The Private tag class
            </summary>
        </member>
        <member name="T:System.Security.Cryptography.Asn1.UniversalTagNumber">
            <summary>
              Tag assignments for the UNIVERSAL class in ITU-T X.680.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.EndOfContents">
            <summary>
              The reserved identifier for the End-of-Contents marker in an indefinite
              length encoding.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.Boolean">
            <summary>
              The universal class tag value for Boolean.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.Integer">
            <summary>
              The universal class tag value for Integer.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.BitString">
            <summary>
              The universal class tag value for Bit String.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.OctetString">
            <summary>
              The universal class tag value for Octet String.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.Null">
            <summary>
              The universal class tag value for Null.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.ObjectIdentifier">
            <summary>
              The universal class tag value for Object Identifier.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.ObjectDescriptor">
            <summary>
              The universal class tag value for Object Descriptor.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.External">
            <summary>
              The universal class tag value for External.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.InstanceOf">
            <summary>
              The universal class tag value for Instance-Of.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.Real">
            <summary>
              The universal class tag value for Real.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.Enumerated">
            <summary>
              The universal class tag value for Enumerated.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.Embedded">
            <summary>
              The universal class tag value for Embedded-PDV.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.UTF8String">
            <summary>
              The universal class tag value for UTF8String.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.RelativeObjectIdentifier">
            <summary>
              The universal class tag value for Relative Object Identifier.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.Time">
            <summary>
              The universal class tag value for Time.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.Sequence">
            <summary>
              The universal class tag value for Sequence.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.SequenceOf">
            <summary>
              The universal class tag value for Sequence-Of.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.Set">
            <summary>
              The universal class tag value for Set.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.SetOf">
            <summary>
              The universal class tag value for Set-Of.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.NumericString">
            <summary>
              The universal class tag value for NumericString.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.PrintableString">
            <summary>
              The universal class tag value for PrintableString.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.TeletexString">
            <summary>
              The universal class tag value for TeletexString (T61String).
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.T61String">
            <summary>
              The universal class tag value for T61String (TeletexString).
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.VideotexString">
            <summary>
              The universal class tag value for VideotexString.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.IA5String">
            <summary>
              The universal class tag value for IA5String.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.UtcTime">
            <summary>
              The universal class tag value for UTCTime.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.GeneralizedTime">
            <summary>
              The universal class tag value for GeneralizedTime.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.GraphicString">
            <summary>
              The universal class tag value for GraphicString.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.VisibleString">
            <summary>
              The universal class tag value for VisibleString (ISO646String).
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.ISO646String">
            <summary>
              The universal class tag value for ISO646String (VisibleString).
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.GeneralString">
            <summary>
              The universal class tag value for GeneralString.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.UniversalString">
            <summary>
              The universal class tag value for UniversalString.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.UnrestrictedCharacterString">
            <summary>
              The universal class tag value for an unrestricted character string.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.BMPString">
            <summary>
              The universal class tag value for BMPString.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.Date">
            <summary>
              The universal class tag value for Date.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.TimeOfDay">
            <summary>
              The universal class tag value for Time-Of-Day.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.DateTime">
            <summary>
              The universal class tag value for Date-Time.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.Duration">
            <summary>
              The universal class tag value for Duration.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.ObjectIdentifierIRI">
            <summary>
              The universal class tag value for Object Identifier
              Internationalized Resource Identifier (IRI).
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.RelativeObjectIdentifierIRI">
            <summary>
              The universal class tag value for Relative Object Identifier
              Internationalized Resource Identifier (IRI).
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.DSAOpenSsl.#ctor(System.Security.Cryptography.SafeEvpPKeyHandle)">
            <summary>
            Create an DSAOpenSsl from an <see cref="T:System.Security.Cryptography.SafeEvpPKeyHandle"/> whose value is an existing
            OpenSSL <c>EVP_PKEY*</c> wrapping an <c>DSA*</c>
            </summary>
            <param name="pkeyHandle">A SafeHandle for an OpenSSL <c>EVP_PKEY*</c></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="pkeyHandle"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="pkeyHandle"/> <see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" />
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="pkeyHandle"/> is not a valid enveloped <c>DSA*</c></exception>
        </member>
        <member name="M:System.Security.Cryptography.DSAOpenSsl.#ctor(System.IntPtr)">
            <summary>
            Create an DSAOpenSsl from an existing <see cref="T:System.IntPtr"/> whose value is an
            existing OpenSSL <c>DSA*</c>.
            </summary>
            <remarks>
            This method will increase the reference count of the <c>DSA*</c>, the caller should
            continue to manage the lifetime of their reference.
            </remarks>
            <param name="handle">A pointer to an OpenSSL <c>DSA*</c></param>
            <exception cref="T:System.ArgumentException"><paramref name="handle" /> is invalid</exception>
        </member>
        <member name="M:System.Security.Cryptography.DSAOpenSsl.DuplicateKeyHandle">
            <summary>
            Obtain a SafeHandle version of an EVP_PKEY* which wraps an DSA* equivalent
            to the current key for this instance.
            </summary>
            <returns>A SafeHandle for the DSA key in OpenSSL</returns>
        </member>
        <member name="M:System.Security.Cryptography.ECDiffieHellmanOpenSsl.#ctor(System.Security.Cryptography.SafeEvpPKeyHandle)">
            <summary>
            Create an ECDiffieHellmanOpenSsl from an <see cref="T:System.Security.Cryptography.SafeEvpPKeyHandle"/> whose value is an existing
            OpenSSL <c>EVP_PKEY*</c> wrapping an <c>EC_KEY*</c>
            </summary>
            <param name="pkeyHandle">A SafeHandle for an OpenSSL <c>EVP_PKEY*</c></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="pkeyHandle"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException"><paramref name="pkeyHandle"/> <see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" /></exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="pkeyHandle"/> is not a valid enveloped <c>EC_KEY*</c></exception>
        </member>
        <member name="M:System.Security.Cryptography.ECDiffieHellmanOpenSsl.#ctor(System.IntPtr)">
            <summary>
            Create an ECDsaOpenSsl from an existing <see cref="T:System.IntPtr"/> whose value is an
            existing OpenSSL <c>EC_KEY*</c>.
            </summary>
            <remarks>
            This method will increase the reference count of the <c>EC_KEY*</c>, the caller should
            continue to manage the lifetime of their reference.
            </remarks>
            <param name="handle">A pointer to an OpenSSL <c>EC_KEY*</c></param>
            <exception cref="T:System.ArgumentException"><paramref name="handle" /> is invalid</exception>
        </member>
        <member name="M:System.Security.Cryptography.ECDiffieHellmanOpenSsl.DuplicateKeyHandle">
            <summary>
            Obtain a SafeHandle version of an EVP_PKEY* which wraps an EC_KEY* equivalent
            to the current key for this instance.
            </summary>
            <returns>A SafeHandle for the EC_KEY key in OpenSSL</returns>
        </member>
        <member name="M:System.Security.Cryptography.ECDiffieHellmanOpenSsl.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)">
            <summary>
            Given a second party's public key, derive shared key material
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.ECDiffieHellmanOpenSsl.DeriveSecretAgreement(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.IncrementalHash)">
            <summary>
            Get the secret agreement generated between two parties
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.ECDsaOpenSsl.#ctor(System.Security.Cryptography.SafeEvpPKeyHandle)">
            <summary>
            Create an ECDsaOpenSsl from an <see cref="T:System.Security.Cryptography.SafeEvpPKeyHandle"/> whose value is an existing
            OpenSSL <c>EVP_PKEY*</c> wrapping an <c>EC_KEY*</c>
            </summary>
            <param name="pkeyHandle">A SafeHandle for an OpenSSL <c>EVP_PKEY*</c></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="pkeyHandle"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException"><paramref name="pkeyHandle"/> <see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" /></exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="pkeyHandle"/> is not a valid enveloped <c>EC_KEY*</c></exception>
        </member>
        <member name="M:System.Security.Cryptography.ECDsaOpenSsl.#ctor(System.IntPtr)">
            <summary>
            Create an ECDsaOpenSsl from an existing <see cref="T:System.IntPtr"/> whose value is an
            existing OpenSSL <c>EC_KEY*</c>.
            </summary>
            <remarks>
            This method will increase the reference count of the <c>EC_KEY*</c>, the caller should
            continue to manage the lifetime of their reference.
            </remarks>
            <param name="handle">A pointer to an OpenSSL <c>EC_KEY*</c></param>
            <exception cref="T:System.ArgumentException"><paramref name="handle" /> is invalid</exception>
        </member>
        <member name="M:System.Security.Cryptography.ECDsaOpenSsl.DuplicateKeyHandle">
            <summary>
            Obtain a SafeHandle version of an EVP_PKEY* which wraps an EC_KEY* equivalent
            to the current key for this instance.
            </summary>
            <returns>A SafeHandle for the EC_KEY key in OpenSSL</returns>
        </member>
        <member name="M:System.Security.Cryptography.ECDsaOpenSsl.#ctor(System.Security.Cryptography.ECCurve)">
            <summary>
            Create an ECDsaOpenSsl algorithm with a named curve.
            </summary>
            <param name="curve">The <see cref="T:System.Security.Cryptography.ECCurve"/> representing the curve.</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="curve" /> is null.</exception>
        </member>
        <member name="M:System.Security.Cryptography.ECDsaOpenSsl.#ctor">
            <summary>
                Create an ECDsaOpenSsl algorithm with a random 521 bit key pair.
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.ECDsaOpenSsl.#ctor(System.Int32)">
            <summary>
                Creates a new ECDsaOpenSsl object that will use a randomly generated key of the specified size.
            </summary>
            <param name="keySize">Size of the key to generate, in bits.</param>
        </member>
        <member name="M:System.Security.Cryptography.ECDsaOpenSsl.ForceSetKeySize(System.Int32)">
            <summary>
            Set the KeySize without validating against LegalKeySizes.
            </summary>
            <param name="newKeySize">The value to set the KeySize to.</param>
        </member>
        <member name="M:System.Security.Cryptography.RSAOpenSsl.#ctor(System.IntPtr)">
            <summary>
            Create an RSAOpenSsl from an existing <see cref="T:System.IntPtr"/> whose value is an
            existing OpenSSL <c>RSA*</c>.
            </summary>
            <remarks>
            This method will increase the reference count of the <c>RSA*</c>, the caller should
            continue to manage the lifetime of their reference.
            </remarks>
            <param name="handle">A pointer to an OpenSSL <c>RSA*</c></param>
            <exception cref="T:System.ArgumentException"><paramref name="handle" /> is invalid</exception>
        </member>
        <member name="M:System.Security.Cryptography.RSAOpenSsl.#ctor(System.Security.Cryptography.SafeEvpPKeyHandle)">
            <summary>
            Create an RSAOpenSsl from an <see cref="T:System.Security.Cryptography.SafeEvpPKeyHandle"/> whose value is an existing
            OpenSSL <c>EVP_PKEY*</c> wrapping an <c>RSA*</c>
            </summary>
            <param name="pkeyHandle">A SafeHandle for an OpenSSL <c>EVP_PKEY*</c></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="pkeyHandle"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="pkeyHandle"/> <see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" />
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="pkeyHandle"/> is not a valid enveloped <c>RSA*</c></exception>
        </member>
        <member name="M:System.Security.Cryptography.RSAOpenSsl.DuplicateKeyHandle">
            <summary>
            Obtain a SafeHandle version of an EVP_PKEY* which wraps an RSA* equivalent
            to the current key for this instance.
            </summary>
            <returns>A SafeHandle for the RSA key in OpenSSL</returns>
        </member>
        <member name="M:System.Security.Cryptography.SafeEvpPKeyHandle.DuplicateHandle">
            <summary>
            Create another instance of SafeEvpPKeyHandle which has an independent lifetime
            from this instance, but tracks the same resource.
            </summary>
            <returns>An equivalent SafeEvpPKeyHandle with a different lifetime</returns>
        </member>
        <member name="P:System.Security.Cryptography.SafeEvpPKeyHandle.OpenSslVersion">
            <summary>
            The runtime version number for the loaded version of OpenSSL.
            </summary>
            <remarks>
            For OpenSSL 1.1+ this is the result of <code>OpenSSL_version_num()</code>,
            for OpenSSL 1.0.x this is the result of <code>SSLeay()</code>.
            </remarks>
        </member>
        <member name="T:System.Security.Cryptography.ECDiffieHellmanDerivation.DeriveSecretAgreement">
            <summary>
            Derive the raw ECDH value into <paramref name="hasher"/>, if present, otherwise returning the value.
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.RsaPaddingProcessor.Xor(System.Span{System.Byte},System.ReadOnlySpan{System.Byte})">
            <summary>
            Bitwise XOR of <paramref name="b"/> into <paramref name="a"/>.
            </summary>
        </member>
        <member name="P:System.SR.Arg_CryptographyException">
            <summary>Error occurred during a cryptographic operation.</summary>
        </member>
        <member name="P:System.SR.Argument_EncodeDestinationTooSmall">
            <summary>The destination is too small to hold the encoded value.</summary>
        </member>
        <member name="P:System.SR.Argument_InvalidOidValue">
            <summary>The OID value was invalid.</summary>
        </member>
        <member name="P:System.SR.Argument_InvalidValue">
            <summary>Value was invalid.</summary>
        </member>
        <member name="P:System.SR.Cryptography_ArgECDHKeySizeMismatch">
            <summary>The keys from both parties must be the same size to generate a secret agreement.</summary>
        </member>
        <member name="P:System.SR.Cryptography_CSP_NoPrivateKey">
            <summary>Object contains only the public half of a key pair. A private key must also be provided.</summary>
        </member>
        <member name="P:System.SR.Cryptography_Encryption_MessageTooLong">
            <summary>The message exceeds the maximum allowable length for the chosen options ({0}).</summary>
        </member>
        <member name="P:System.SR.Cryptography_HashAlgorithmNameNullOrEmpty">
            <summary>The hash algorithm name cannot be null or empty.</summary>
        </member>
        <member name="P:System.SR.Cryptography_CurveNotSupported">
            <summary>The specified curve '{0}' or its parameters are not valid for this platform.</summary>
        </member>
        <member name="P:System.SR.Cryptography_Der_Invalid_Encoding">
            <summary>ASN1 corrupted data.</summary>
        </member>
        <member name="P:System.SR.Cryptography_InvalidDsaParameters_MissingFields">
            <summary>The specified DSA parameters are not valid; P, Q, G and Y are all required.</summary>
        </member>
        <member name="P:System.SR.Cryptography_InvalidDsaParameters_MismatchedPGY">
            <summary>The specified DSA parameters are not valid; P, G and Y must be the same length (the key size).</summary>
        </member>
        <member name="P:System.SR.Cryptography_InvalidDsaParameters_MismatchedQX">
            <summary>The specified DSA parameters are not valid; Q and X (if present) must be the same length.</summary>
        </member>
        <member name="P:System.SR.Cryptography_InvalidDsaParameters_MismatchedPJ">
            <summary>The specified DSA parameters are not valid; J (if present) must be shorter than P.</summary>
        </member>
        <member name="P:System.SR.Cryptography_InvalidDsaParameters_SeedRestriction_ShortKey">
            <summary>The specified DSA parameters are not valid; Seed, if present, must be 20 bytes long for keys shorter than 1024 bits.</summary>
        </member>
        <member name="P:System.SR.Cryptography_InvalidDsaParameters_QRestriction_ShortKey">
            <summary>The specified DSA parameters are not valid; Q must be 20 bytes long for keys shorter than 1024 bits.</summary>
        </member>
        <member name="P:System.SR.Cryptography_InvalidDsaParameters_QRestriction_LargeKey">
            <summary>The specified DSA parameters are not valid; Q's length must be one of 20, 32 or 64 bytes.</summary>
        </member>
        <member name="P:System.SR.Cryptography_InvalidKeySize">
            <summary>Specified key is not a valid size for this algorithm.</summary>
        </member>
        <member name="P:System.SR.Cryptography_InvalidPaddingMode">
            <summary>Specified padding mode is not valid for this algorithm.</summary>
        </member>
        <member name="P:System.SR.Cryptography_OpenInvalidHandle">
            <summary>Cannot open an invalid handle.</summary>
        </member>
        <member name="P:System.SR.Cryptography_TlsRequires64ByteSeed">
            <summary>The TLS key derivation function requires a seed value of exactly 64 bytes.</summary>
        </member>
        <member name="P:System.SR.Cryptography_UnknownHashAlgorithm">
            <summary>'{0}' is not a known hash algorithm.</summary>
        </member>
        <member name="P:System.SR.Cryptography_Invalid_IA5String">
            <summary>The string contains a character not in the 7 bit ASCII character set.</summary>
        </member>
        <member name="P:System.SR.Cryptography_KeyTooSmall">
            <summary>The key is too small for the requested operation.</summary>
        </member>
        <member name="P:System.SR.Cryptography_OAEP_Decryption_Failed">
            <summary>Error occurred while decoding OAEP padding.</summary>
        </member>
        <member name="P:System.SR.Cryptography_RSA_DecryptWrongSize">
            <summary>The length of the data to decrypt is not valid for the size of this key.</summary>
        </member>
        <member name="P:System.SR.Cryptography_SignHash_WrongSize">
            <summary>The provided hash value is not the expected size for the specified hash algorithm.</summary>
        </member>
        <member name="P:System.SR.Cryptography_WriteEncodedValue_OneValueAtATime">
            <summary>The input to WriteEncodedValue must represent a single encoded value with no trailing data.</summary>
        </member>
        <member name="P:System.SR.Cryptography_Asn_EnumeratedValueRequiresNonFlagsEnum">
            <summary>ASN.1 Enumerated values only apply to enum types without the [Flags] attribute.</summary>
        </member>
        <member name="P:System.SR.Cryptography_Asn_NamedBitListRequiresFlagsEnum">
            <summary>Named bit list operations require an enum with the [Flags] attribute.</summary>
        </member>
        <member name="P:System.SR.Cryptography_Asn_NamedBitListValueTooBig">
            <summary>The encoded named bit list value is larger than the value size of the '{0}' enum.</summary>
        </member>
        <member name="P:System.SR.Cryptography_Asn_UniversalValueIsFixed">
            <summary>Tags with TagClass Universal must have the appropriate TagValue value for the data type being read or written.</summary>
        </member>
        <member name="P:System.SR.Cryptography_Asn_UnusedBitCountRange">
            <summary>Unused bit count must be between 0 and 7, inclusive.</summary>
        </member>
        <member name="P:System.SR.Cryptography_AsnWriter_EncodeUnbalancedStack">
            <summary>Encode cannot be called while a Sequence or SetOf is still open.</summary>
        </member>
        <member name="P:System.SR.Cryptography_AsnWriter_PopWrongTag">
            <summary>Cannot pop the requested tag as it is not currently in progress.</summary>
        </member>
        <member name="P:System.SR.Cryptography_NotValidPublicOrPrivateKey">
            <summary>Key is not a valid public or private key.</summary>
        </member>
        <member name="P:System.SR.PlatformNotSupported_CryptographyOpenSSL">
            <summary>OpenSSL is not supported on this platform.</summary>
        </member>
        <member name="M:Internal.Cryptography.AsymmetricAlgorithmHelpers.ConvertIeee1363ToDer(System.ReadOnlySpan{System.Byte})">
            <summary>
            Convert Ieee1363 format of (r, s) to Der format
            </summary>
        </member>
        <member name="M:Internal.Cryptography.AsymmetricAlgorithmHelpers.ConvertDerToIeee1363(System.ReadOnlySpan{System.Byte},System.Int32)">
            <summary>
            Convert Der format of (r, s) to Ieee1363 format
            </summary>
        </member>
        <member name="M:Interop.Crypto.DsaEncodedSignatureSize(Microsoft.Win32.SafeHandles.SafeDsaHandle)">
            <summary>
            Return the maximum size of the DER-encoded key in bytes.
            </summary>
        </member>
        <member name="M:Interop.Crypto.DsaSignatureFieldSize(Microsoft.Win32.SafeHandles.SafeDsaHandle)">
            <summary>
            Return the size of the 'r' or 's' signature fields in bytes.
            </summary>
        </member>
        <member name="M:Interop.Crypto.DsaKeySize(Microsoft.Win32.SafeHandles.SafeDsaHandle)">
            <summary>
            Return the size of the key in bytes.
            </summary>
        </member>
        <member name="M:Interop.Crypto.GetMax(System.Int32[])">
            <summary>
            Return the maximum value in the array; assumes non-negative values.
            </summary>
        </member>
        <member name="M:Interop.Crypto.GetMax(System.Int32,System.Int32)">
            <summary>
            Return the maximum value in the array; assumes non-negative values.
            </summary>
        </member>
        <member name="M:Interop.Crypto.GetMax(System.Int32,System.Int32,System.Int32)">
            <summary>
            Return the maximum value in the array; assumes non-negative values.
            </summary>
        </member>
    </members>
</doc>
