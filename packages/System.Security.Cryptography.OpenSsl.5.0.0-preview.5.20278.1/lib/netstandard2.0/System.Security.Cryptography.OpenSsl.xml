<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Security.Cryptography.OpenSsl</name>
    </assembly>
    <members>
        <member name="P:System.SR.Arg_CryptographyException">
            <summary>Error occurred during a cryptographic operation.</summary>
        </member>
        <member name="P:System.SR.Argument_EncodeDestinationTooSmall">
            <summary>The destination is too small to hold the encoded value.</summary>
        </member>
        <member name="P:System.SR.Argument_InvalidOidValue">
            <summary>The OID value was invalid.</summary>
        </member>
        <member name="P:System.SR.Argument_InvalidValue">
            <summary>Value was invalid.</summary>
        </member>
        <member name="P:System.SR.Cryptography_ArgECDHKeySizeMismatch">
            <summary>The keys from both parties must be the same size to generate a secret agreement.</summary>
        </member>
        <member name="P:System.SR.Cryptography_CSP_NoPrivateKey">
            <summary>Object contains only the public half of a key pair. A private key must also be provided.</summary>
        </member>
        <member name="P:System.SR.Cryptography_Encryption_MessageTooLong">
            <summary>The message exceeds the maximum allowable length for the chosen options ({0}).</summary>
        </member>
        <member name="P:System.SR.Cryptography_HashAlgorithmNameNullOrEmpty">
            <summary>The hash algorithm name cannot be null or empty.</summary>
        </member>
        <member name="P:System.SR.Cryptography_CurveNotSupported">
            <summary>The specified curve '{0}' or its parameters are not valid for this platform.</summary>
        </member>
        <member name="P:System.SR.Cryptography_Der_Invalid_Encoding">
            <summary>ASN1 corrupted data.</summary>
        </member>
        <member name="P:System.SR.Cryptography_InvalidDsaParameters_MissingFields">
            <summary>The specified DSA parameters are not valid; P, Q, G and Y are all required.</summary>
        </member>
        <member name="P:System.SR.Cryptography_InvalidDsaParameters_MismatchedPGY">
            <summary>The specified DSA parameters are not valid; P, G and Y must be the same length (the key size).</summary>
        </member>
        <member name="P:System.SR.Cryptography_InvalidDsaParameters_MismatchedQX">
            <summary>The specified DSA parameters are not valid; Q and X (if present) must be the same length.</summary>
        </member>
        <member name="P:System.SR.Cryptography_InvalidDsaParameters_MismatchedPJ">
            <summary>The specified DSA parameters are not valid; J (if present) must be shorter than P.</summary>
        </member>
        <member name="P:System.SR.Cryptography_InvalidDsaParameters_SeedRestriction_ShortKey">
            <summary>The specified DSA parameters are not valid; Seed, if present, must be 20 bytes long for keys shorter than 1024 bits.</summary>
        </member>
        <member name="P:System.SR.Cryptography_InvalidDsaParameters_QRestriction_ShortKey">
            <summary>The specified DSA parameters are not valid; Q must be 20 bytes long for keys shorter than 1024 bits.</summary>
        </member>
        <member name="P:System.SR.Cryptography_InvalidDsaParameters_QRestriction_LargeKey">
            <summary>The specified DSA parameters are not valid; Q's length must be one of 20, 32 or 64 bytes.</summary>
        </member>
        <member name="P:System.SR.Cryptography_InvalidKeySize">
            <summary>Specified key is not a valid size for this algorithm.</summary>
        </member>
        <member name="P:System.SR.Cryptography_InvalidPaddingMode">
            <summary>Specified padding mode is not valid for this algorithm.</summary>
        </member>
        <member name="P:System.SR.Cryptography_OpenInvalidHandle">
            <summary>Cannot open an invalid handle.</summary>
        </member>
        <member name="P:System.SR.Cryptography_TlsRequires64ByteSeed">
            <summary>The TLS key derivation function requires a seed value of exactly 64 bytes.</summary>
        </member>
        <member name="P:System.SR.Cryptography_UnknownHashAlgorithm">
            <summary>'{0}' is not a known hash algorithm.</summary>
        </member>
        <member name="P:System.SR.Cryptography_Invalid_IA5String">
            <summary>The string contains a character not in the 7 bit ASCII character set.</summary>
        </member>
        <member name="P:System.SR.Cryptography_KeyTooSmall">
            <summary>The key is too small for the requested operation.</summary>
        </member>
        <member name="P:System.SR.Cryptography_OAEP_Decryption_Failed">
            <summary>Error occurred while decoding OAEP padding.</summary>
        </member>
        <member name="P:System.SR.Cryptography_RSA_DecryptWrongSize">
            <summary>The length of the data to decrypt is not valid for the size of this key.</summary>
        </member>
        <member name="P:System.SR.Cryptography_SignHash_WrongSize">
            <summary>The provided hash value is not the expected size for the specified hash algorithm.</summary>
        </member>
        <member name="P:System.SR.Cryptography_WriteEncodedValue_OneValueAtATime">
            <summary>The input to WriteEncodedValue must represent a single encoded value with no trailing data.</summary>
        </member>
        <member name="P:System.SR.Cryptography_Asn_EnumeratedValueRequiresNonFlagsEnum">
            <summary>ASN.1 Enumerated values only apply to enum types without the [Flags] attribute.</summary>
        </member>
        <member name="P:System.SR.Cryptography_Asn_NamedBitListRequiresFlagsEnum">
            <summary>Named bit list operations require an enum with the [Flags] attribute.</summary>
        </member>
        <member name="P:System.SR.Cryptography_Asn_NamedBitListValueTooBig">
            <summary>The encoded named bit list value is larger than the value size of the '{0}' enum.</summary>
        </member>
        <member name="P:System.SR.Cryptography_Asn_UniversalValueIsFixed">
            <summary>Tags with TagClass Universal must have the appropriate TagValue value for the data type being read or written.</summary>
        </member>
        <member name="P:System.SR.Cryptography_Asn_UnusedBitCountRange">
            <summary>Unused bit count must be between 0 and 7, inclusive.</summary>
        </member>
        <member name="P:System.SR.Cryptography_AsnWriter_EncodeUnbalancedStack">
            <summary>Encode cannot be called while a Sequence or SetOf is still open.</summary>
        </member>
        <member name="P:System.SR.Cryptography_AsnWriter_PopWrongTag">
            <summary>Cannot pop the requested tag as it is not currently in progress.</summary>
        </member>
        <member name="P:System.SR.Cryptography_NotValidPublicOrPrivateKey">
            <summary>Key is not a valid public or private key.</summary>
        </member>
        <member name="P:System.SR.PlatformNotSupported_CryptographyOpenSSL">
            <summary>OpenSSL is not supported on this platform.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it. Specifies that an input argument was not null when the call returns.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with a field or property member.</summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>Initializes the attribute with the list of field and property members.</summary>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values when returning with the specified return value condition.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>Initializes the attribute with the specified return value condition and a field or property member.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>Initializes the attribute with the specified return value condition and list of field and property members.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
    </members>
</doc>
